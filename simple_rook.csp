#include "board.csp";

var whiteRook2 = [DEAD, DEAD];

WhiteRook() = WhiteRookVertical() [] WhiteRookHorizontal();

WhiteRookVertical() = WhiteRookUp() [] WhiteRookDown();

WhiteRookHorizontal() = WhiteRookLeft() [] WhiteRookRight();

WhiteRookUp() = WhiteRook1Up() [] WhiteRook2Up() [] WhiteRook1UpCapture() [] WhiteRook2UpCapture();

WhiteRookDown() = WhiteRook1Down() [] WhiteRook2Down() [] WhiteRook1DownCapture() [] WhiteRook2DownCapture();

WhiteRookLeft() = WhiteRook1Left() [] WhiteRook2Left() [] WhiteRook1LeftCapture() [] WhiteRook2LeftCapture();

WhiteRookRight() = WhiteRook1Right() [] WhiteRook2Right() [] WhiteRook1RightCapture() [] WhiteRook2RightCapture();

WhiteRook1Up() = [currentTurn == WHITE_TURN && 
                  ((whiteRook1[0] != DEAD && whiteRook1[1] != DEAD) &&
                   (whiteRook1[0] != RANK_8 && (actualBoard[whiteRook1[0] - 1][whiteRook1[1]] == 0 )))] whiteRook1Up {
                     actualBoard[whiteRook1[0]][whiteRook1[1]] = 0;
                     whiteRook1[0] = whiteRook1[0] - 1;
                 } -> WhiteRook1Up() [] Dummy();

WhiteRook1UpCapture() = [currentTurn == WHITE_TURN && (whiteRook1[0] != DEAD && whiteRook1[1] != DEAD) &&
							(actualBoard[whiteRook1[0] - 1][whiteRook1[1]] >= BLACK_PAWN_1)] whiteRook1UpCapture {
							actualBoard[whiteRook1[0]][whiteRook1[1]] = 0; whiteRook1[0] = whiteRook1[0] - 1;
							} -> validateWhite();

WhiteRook2Up() = [currentTurn == WHITE_TURN && 
                  ((whiteRook2[0] != DEAD && whiteRook2[1] != DEAD) &&
                   (whiteRook2[0] != RANK_8 && (actualBoard[whiteRook2[0] - 1][whiteRook2[1]] == 0)))] whiteRook2Up {
                     actualBoard[whiteRook2[0]][whiteRook2[1]] = 0;
                     whiteRook2[0] = whiteRook2[0] - 1;
                 } -> WhiteRook2Up() [] Dummy();
                 
WhiteRook2UpCapture() = [currentTurn == WHITE_TURN && (whiteRook2[0] != DEAD && whiteRook2[1] != DEAD) &&
							(actualBoard[whiteRook2[0] - 1][whiteRook2[1]] >= BLACK_PAWN_1)] whiteRook2UpCapture {
							actualBoard[whiteRook2[0]][whiteRook2[1]] = 0; whiteRook2[0] = whiteRook2[0] - 1;
							} -> validateWhite();

WhiteRook1Down() = [currentTurn == WHITE_TURN &&
                    ((whiteRook1[0] != DEAD && whiteRook1[1] != DEAD) &&
                     (whiteRook1[0] != RANK_1 && (actualBoard[whiteRook1[0] + 1][whiteRook1[1]] == 0)))] whiteRook1Down {
                       actualBoard[whiteRook1[0]][whiteRook1[1]] = 0;
                       whiteRook1[0] = whiteRook1[0] + 1;
                   } -> WhiteRook1Down() [] Dummy();
                   
WhiteRook1DownCapture() = [currentTurn == WHITE_TURN && (whiteRook1[0] != DEAD && whiteRook1[1] != DEAD) &&
								(actualBoard[whiteRook1[0] + 1][whiteRook1[1]] >= BLACK_PAWN_1)] whiteRook1DownCapture {
								actualBoard[whiteRook1[0]][whiteRook1[1]] = 0;
                       			whiteRook1[0] = whiteRook1[0] + 1;
                       		} -> validateWhite();

WhiteRook2Down() = [currentTurn == WHITE_TURN && 
                    ((whiteRook2[0] != DEAD && whiteRook2[1] != DEAD) &&
                     (whiteRook2[0] != RANK_1 && (actualBoard[whiteRook2[0] + 1][whiteRook2[1]] == 0)))] whiteRook2Down {
                       actualBoard[whiteRook2[0]][whiteRook2[1]] = 0;
                       whiteRook2[0] = whiteRook2[0] + 1;
                   } -> WhiteRook2Down() [] Dummy();
                   
WhiteRook2DownCapture() = [currentTurn == WHITE_TURN && (whiteRook2[0] != DEAD && whiteRook2[1] != DEAD) &&
								(actualBoard[whiteRook2[0] + 1][whiteRook2[1]] >= BLACK_PAWN_1)] whiteRook2DownCapture {
								actualBoard[whiteRook2[0]][whiteRook2[1]] = 0;
                       			whiteRook2[0] = whiteRook2[0] + 1;
                       		} -> validateWhite();

WhiteRook1Left() = [currentTurn == WHITE_TURN && 
                    ((whiteRook1[0] != DEAD && whiteRook1[1] != DEAD) &&
                     (whiteRook1[1] != FILE_A && (actualBoard[whiteRook1[0]][whiteRook1[1] - 1] == 0 )))] whiteRook1Left {
                       actualBoard[whiteRook1[0]][whiteRook1[1]] = 0;
                       whiteRook1[1] = whiteRook1[1] - 1;
                   } -> WhiteRook1Left() [] Dummy();
                   
WhiteRook1LeftCapture() = [currentTurn == WHITE_TURN && (whiteRook1[0] != DEAD && whiteRook1[1] != DEAD) &&
								(actualBoard[whiteRook1[0]][whiteRook1[1] - 1] >= BLACK_PAWN_1)] whiteRook1LeftCapture {
								actualBoard[whiteRook1[0]][whiteRook1[1]] = 0;
                       			whiteRook1[1] = whiteRook1[1] - 1;
                       		} -> validateWhite();

WhiteRook2Left() = [currentTurn == WHITE_TURN && 
                    ((whiteRook2[0] != DEAD && whiteRook2[1] != DEAD) &&
                     (whiteRook2[1] != FILE_A && (actualBoard[whiteRook2[0]][whiteRook2[1] - 1] == 0 || 
                      actualBoard[whiteRook2[0]][whiteRook2[1] - 1] >= BLACK_PAWN_1)))] whiteRook2Left {
                       actualBoard[whiteRook2[0]][whiteRook2[1]] = 0;
                       whiteRook2[1] = whiteRook2[1] - 1;
                   } -> WhiteRook2Left() [] Dummy();

WhiteRook2LeftCapture() = [currentTurn == WHITE_TURN && (whiteRook2[0] != DEAD && whiteRook2[1] != DEAD) &&
								(actualBoard[whiteRook2[0]][whiteRook2[1] - 1] >= BLACK_PAWN_1)] whiteRook2LeftCapture {
								actualBoard[whiteRook2[0]][whiteRook2[1]] = 0;
                       			whiteRook2[1] = whiteRook2[1] - 1;
                       		} -> validateWhite();
                       		
WhiteRook1Right() = [currentTurn == WHITE_TURN && 
                     ((whiteRook1[0] != DEAD && whiteRook1[1] != DEAD) &&
                      (whiteRook1[1] != FILE_H && (actualBoard[whiteRook1[0]][whiteRook1[1] + 1] == 0)))] whiteRook1Left {
                       actualBoard[whiteRook1[0]][whiteRook1[1]] = 0;
                       whiteRook1[1] = whiteRook1[1] + 1;
                   } -> WhiteRook1Right() [] Dummy();
                   
WhiteRook1RightCapture() = [currentTurn == WHITE_TURN && (whiteRook1[0] != DEAD && whiteRook1[1] != DEAD) &&
								(actualBoard[whiteRook1[0]][whiteRook1[1] + 1] >= BLACK_PAWN_1)] whiteRook1RightCapture {
								actualBoard[whiteRook1[0]][whiteRook1[1]] = 0;
                       			whiteRook1[1] = whiteRook1[1] + 1;
                       		} -> validateWhite();

WhiteRook2Right() = [currentTurn == WHITE_TURN && 
                     ((whiteRook2[0] != DEAD && whiteRook2[1] != DEAD) &&
                      (whiteRook2[1] != FILE_H && (actualBoard[whiteRook2[0]][whiteRook2[1] + 1] == 0)))] whiteRook2Left {
                       actualBoard[whiteRook2[0]][whiteRook2[1]] = 0;
                       whiteRook2[1] = whiteRook2[1] + 1;
                   } -> WhiteRook2Right() [] Dummy();
                   
WhiteRook2RightCapture() = [currentTurn == WHITE_TURN && (whiteRook2[0] != DEAD && whiteRook2[1] != DEAD) &&
								(actualBoard[whiteRook2[0]][whiteRook2[1] + 1] >= BLACK_PAWN_1)] whiteRook2RightCapture {
								actualBoard[whiteRook2[0]][whiteRook2[1]] = 0;
                       			whiteRook2[1] = whiteRook2[1] + 1;
                       		} -> validateWhite();
