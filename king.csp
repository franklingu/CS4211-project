#include "move.csp";

blackKingUp() = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], 1, 0)]movePiece(BLACK_KING, 1, 0);
blackKingDown() = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], -1, 0)]movePiece(BLACK_KING, -1, 0);
blackKingRight() = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], 0, 1)]movePiece(BLACK_KING, 0, 1);
blackKingLeft() = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], 0, -1)]movePiece(BLACK_KING, 0, -1);
blackKingUpLeft() = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], 1, -1)]movePiece(BLACK_KING, 1, -1);
blackKingUpRight() = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], 1, 1)]movePiece(BLACK_KING, 1, 1);
blackKingDownLeft() = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], -1, -1)]movePiece(BLACK_KING, -1, -1);
blackKingDownRight() = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], -1, 1)]movePiece(BLACK_KING, -1, 1);

blackKing() = blackKingUp() [] blackKingRight() [] blackKingDown() [] blackKingLeft() []
              blackKingUpLeft() [] blackKingUpRight() [] blackKingDownLeft() [] blackKingDownRight();

whiteKingUp() = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], 1, 0)]movePiece(WHITE_KING, 1, 0);
whiteKingDown() = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], -1, 0)]movePiece(WHITE_KING, -1, 0);
whiteKingRight() = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], 0, 1)]movePiece(WHITE_KING, 0, 1);
whiteKingLeft() = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], 0, -1)]movePiece(WHITE_KING, 0, -1);
whiteKingUpLeft() = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], 1, -1)]movePiece(WHITE_KING, 1, -1);
whiteKingUpRight() = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], 1, 1)]movePiece(WHITE_KING, 1, 1);
whiteKingDownLeft() = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], -1, -1)]movePiece(WHITE_KING, -1, -1);
whiteKingDownRight() = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], -1, 1)]movePiece(WHITE_KING, -1, 1);

whiteKing() = whiteKingUp() [] whiteKingRight() [] whiteKingDown() [] whiteKingLeft() []
              whiteKingUpLeft() [] whiteKingUpRight() [] whiteKingDownLeft() [] whiteKingDownRight();

#define goalSuccessWhiteKingUp piecePosition[WHITE_KING][0] == RANK_2 && piecePosition[WHITE_KING][1] == FILE_E &&
						actualBoard[RANK_2][FILE_E] == WHITE_KING;
#define goalSuccessWhiteKingUpLeft piecePosition[WHITE_KING][0] == RANK_2 && piecePosition[WHITE_KING][1] == FILE_D &&
							actualBoard[RANK_2][FILE_D] == WHITE_KING;
#define goalSuccessWhiteKingUpRight piecePosition[WHITE_KING][0] == RANK_2 && piecePosition[WHITE_KING][1] == FILE_F &&
							 actualBoard[RANK_2][FILE_F] == WHITE_KING;
#define goalSuccessWhiteKingLeft piecePosition[WHITE_KING][0] == RANK_1 && piecePosition[WHITE_KING][1] == FILE_D &&
						  actualBoard[RANK_1][FILE_D] == WHITE_KING;
#define goalFailureWhiteKingRightSelfPiece piecePosition[WHITE_KING][0] == RANK_1 && piecePosition[WHITE_KING][1] == FILE_F;
#define goalFailureMoveNotPossible1 piecePosition[WHITE_KING][0] == RANK_3 && piecePosition[WHITE_KING][1] == FILE_E;
#define goalFailureMoveNotPossible2 piecePosition[WHITE_KING][0] == RANK_3 && piecePosition[WHITE_KING][1] == FILE_E;

#assert whiteKing() reaches goalSuccessWhiteKingUp;
#assert whiteKing() reaches goalSuccessWhiteKingUpLeft;
#assert whiteKing() reaches goalSuccessWhiteKingUpRight;
#assert whiteKing() reaches goalSuccessWhiteKingLeft;
#assert whiteKing() reaches goalFailureWhiteKingRightSelfPiece;
#assert whiteKing() reaches goalFailureMoveNotPossible1;
#assert whiteKing() reaches goalFailureMoveNotPossible2;

#define goalSuccessBlackKingDownRightEnemyPiece piecePosition[BLACK_KING][0] == RANK_7 && piecePosition[BLACK_KING][1] == FILE_F &&
										 actualBoard[RANK_7][FILE_F] == BLACK_KING;
#define goalFailureBlackKingDownSelfPiece piecePosition[BLACK_KING][0] == RANK_7 && piecePosition[BLACK_KING][1] == FILE_E;
#define goalFailureBlackKingDownLeftSelfPiece piecePosition[BLACK_KING][0] == RANK_7 && piecePosition[BLACK_KING][1] == FILE_D;
#define goalSuccessBlackKingRight piecePosition[BLACK_KING][0] == RANK_8 && piecePosition[BLACK_KING][1] == FILE_F &&
						   		actualBoard[RANK_8][FILE_F] == BLACK_KING;
#define goalSuccessBlackKingLeft piecePosition[BLACK_KING][0] == RANK_8 && piecePosition[BLACK_KING][1] == FILE_D &&
						   		actualBoard[RANK_8][FILE_D] == BLACK_KING;

moveBlacKing() = changeTurnToBlack{currentTurn = BLACK_TURN;} -> blackKing();

#assert moveBlacKing() reaches goalSuccessBlackKingDownRightEnemyPiece;
#assert moveBlacKing() reaches goalFailureBlackKingDownSelfPiece;
#assert moveBlacKing() reaches goalFailureBlackKingDownLeftSelfPiece;
#assert moveBlacKing() reaches goalSuccessBlackKingRight;
#assert moveBlacKing() reaches goalSuccessBlackKingLeft;
