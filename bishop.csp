#include "board.csp";

whiteBishop() = whiteBishopUpLeft() [] whiteBishopUpRight() [] whiteBishopDownLeft() [] whiteBishopDownRight();

whiteBishopUpLeft() = whiteQueensBishopUpLeft() [] whiteKingsBishopUpLeft();
whiteBishopUpRight() = whiteQueensBishopUpRight() [] whiteKingsBishopUpRight();
whiteBishopDownLeft() = whiteQueensBishopDownLeft() [] whiteKingsBishopDownLeft();
whiteBishopDownRight() = whiteQueensBishopDownRight() [] whiteKingsBishopDownRight();

whiteQueensBishopUpLeft() = [currentTurn == WHITE_TURN]moveContinuous(WHITE_QUEENS_BISHOP, 1, -1);
whiteQueensBishopUpRight() = [currentTurn == WHITE_TURN]moveContinuous(WHITE_QUEENS_BISHOP, 1, 1);
whiteQueensBishopDownLeft() = [currentTurn == WHITE_TURN]moveContinuous(WHITE_QUEENS_BISHOP, -1, -1);
whiteQueensBishopDownRight() = [currentTurn == WHITE_TURN]moveContinuous(WHITE_QUEENS_BISHOP, -1, 1);

whiteKingsBishopUpLeft() = [currentTurn == WHITE_TURN]moveContinuous(WHITE_KINGS_BISHOP, 1, -1);
whiteKingsBishopUpRight() = [currentTurn == WHITE_TURN]moveContinuous(WHITE_KINGS_BISHOP, 1, 1);
whiteKingsBishopDownLeft() = [currentTurn == WHITE_TURN]moveContinuous(WHITE_KINGS_BISHOP, -1, -1);
whiteKingsBishopDownRight() = [currentTurn == WHITE_TURN]moveContinuous(WHITE_KINGS_BISHOP, -1, 1);					 

blackBishop() = blackBishopUpLeft() [] blackBishopUpRight() [] blackBishopDownLeft() [] blackBishopDownRight();

blackBishopUpLeft() = blackQueensBishopUpLeft() [] blackKingsBishopUpLeft();
blackBishopUpRight() = blackQueensBishopUpRight() [] blackKingsBishopUpRight();
blackBishopDownLeft() = blackQueensBishopDownLeft() [] blackKingsBishopDownLeft();
blackBishopDownRight() = blackQueensBishopDownRight() [] blackKingsBishopDownRight();

blackQueensBishopUpLeft() = [currentTurn == BLACK_TURN]moveContinuous(BLACK_QUEENS_BISHOP, 1, -1);
blackQueensBishopUpRight() = [currentTurn == BLACK_TURN]moveContinuous(BLACK_QUEENS_BISHOP, 1, 1);
blackQueensBishopDownLeft() = [currentTurn == BLACK_TURN]moveContinuous(BLACK_QUEENS_BISHOP, -1, -1);
blackQueensBishopDownRight() = [currentTurn == BLACK_TURN]moveContinuous(BLACK_QUEENS_BISHOP, -1, 1);

blackKingsBishopUpLeft() = [currentTurn == BLACK_TURN]moveContinuous(BLACK_KINGS_BISHOP, 1, -1);
blackKingsBishopUpRight() = [currentTurn == BLACK_TURN]moveContinuous(BLACK_KINGS_BISHOP, 1, 1);
blackKingsBishopDownLeft() = [currentTurn == BLACK_TURN]moveContinuous(BLACK_KINGS_BISHOP, -1, -1);
blackKingsBishopDownRight() = [currentTurn == BLACK_TURN]moveContinuous(BLACK_KINGS_BISHOP, -1, 1);

#assert whiteBishop() reaches goal_white_queen_bishop_jump_over_black_pawn_7;
#assert whiteBishop() reaches goal_white_queen_bishop_occupied_by_black_pawn_7;
#assert whiteBishop() reaches goal_white_queen_bishop_empty_diagonal_2;
#assert whiteBishop() reaches goal_white_queen_bishop_empty_diagonal_3;
#assert whiteBishop() reaches goal_white_queen_bishop_empty_diagonal_4;
#assert whiteBishop() reaches goal_white_queen_bishop_occupied_by_white_queen_bishop;
#assert whiteBishop() reaches goal_white_king_bishop_occupied_by_white_king_bishop;
#assert whiteBishop() reaches goal_white_king_bishop_empty_diagonal_5;
#assert whiteBishop() reaches goal_white_king_bishop_empty_diagonal_6;
#assert whiteBishop() reaches goal_white_king_bishop_empty_diagonal_7;
#assert whiteBishop() reaches goal_white_king_bishop_empty_diagonal_8;
#assert whiteBishop() reaches goal_white_king_bishop_occupied_by_black_queen_knight;

#define goal_white_queen_bishop_jump_over_black_pawn_7 actualBoard[RANK_6][FILE_H] == WHITE_QUEENS_BISHOP && 
	piecePosition[WHITE_QUEENS_BISHOP][RANK] == RANK_6 && piecePosition[WHITE_QUEENS_BISHOP][FILE] == FILE_H;          //shud fail as it cant jump over blackpawn7
	
#define goal_white_queen_bishop_occupied_by_black_pawn_7 actualBoard[RANK_5][FILE_G] == WHITE_QUEENS_BISHOP && 
	piecePosition[WHITE_QUEENS_BISHOP][RANK] == RANK_5 && piecePosition[WHITE_QUEENS_BISHOP][FILE] == FILE_G;	
	
#define goal_white_queen_bishop_empty_diagonal_2 actualBoard[RANK_4][FILE_F] == WHITE_QUEENS_BISHOP && 
	piecePosition[WHITE_QUEENS_BISHOP][RANK] == RANK_4 && piecePosition[WHITE_QUEENS_BISHOP][FILE] == FILE_F;
	
#define goal_white_queen_bishop_empty_diagonal_3 actualBoard[RANK_3][FILE_E] == WHITE_QUEENS_BISHOP && 
	piecePosition[WHITE_QUEENS_BISHOP][RANK] == RANK_3 && piecePosition[WHITE_QUEENS_BISHOP][FILE] == FILE_E;

#define goal_white_queen_bishop_empty_diagonal_4 actualBoard[RANK_2][FILE_D] == WHITE_QUEENS_BISHOP && 
	piecePosition[WHITE_QUEENS_BISHOP][RANK] == RANK_2 && piecePosition[WHITE_QUEENS_BISHOP][FILE] == FILE_D;	
	
#define goal_white_queen_bishop_occupied_by_white_queen_bishop actualBoard[RANK_1][FILE_C] == WHITE_QUEENS_BISHOP && 
	piecePosition[WHITE_QUEENS_BISHOP][RANK] == RANK_1 && piecePosition[WHITE_QUEENS_BISHOP][FILE] == FILE_C;	
	
#define goal_white_king_bishop_occupied_by_white_king_bishop actualBoard[RANK_1][FILE_F] == WHITE_KINGS_BISHOP && 
	piecePosition[WHITE_KINGS_BISHOP][RANK] == RANK_1 && piecePosition[WHITE_KINGS_BISHOP][FILE] == FILE_F;
	
#define goal_white_king_bishop_empty_diagonal_5 actualBoard[RANK_2][FILE_E] == WHITE_KINGS_BISHOP && 
	piecePosition[WHITE_KINGS_BISHOP][RANK] == RANK_2 && piecePosition[WHITE_KINGS_BISHOP][FILE] == FILE_E;	
	
#define goal_white_king_bishop_empty_diagonal_6 actualBoard[RANK_3][FILE_D] == WHITE_KINGS_BISHOP && 
	piecePosition[WHITE_KINGS_BISHOP][RANK] == RANK_3 && piecePosition[WHITE_KINGS_BISHOP][FILE] == FILE_D;
	
#define goal_white_king_bishop_empty_diagonal_7 actualBoard[RANK_4][FILE_C] == WHITE_KINGS_BISHOP && 
	piecePosition[WHITE_KINGS_BISHOP][RANK] == RANK_4 && piecePosition[WHITE_KINGS_BISHOP][FILE] == FILE_C;

#define goal_white_king_bishop_empty_diagonal_8 actualBoard[RANK_5][FILE_B] == WHITE_KINGS_BISHOP && 
	piecePosition[WHITE_KINGS_BISHOP][RANK] == RANK_5 && piecePosition[WHITE_KINGS_BISHOP][FILE] == FILE_B;	
	
#define goal_white_king_bishop_occupied_by_black_queen_knight actualBoard[RANK_6][FILE_A] == WHITE_KINGS_BISHOP && 
	piecePosition[WHITE_KINGS_BISHOP][RANK] == RANK_6 && piecePosition[WHITE_KINGS_BISHOP][FILE] == FILE_A;		




#assert whiteBishop() reaches goal_white_king_bishop_fail_empty_1;
#assert whiteBishop() reaches goal_white_king_bishop_fail_occupied_by_black_pawn_7;
#assert whiteBishop() reaches goal_white_king_bishop_fail_empty_2;
#assert whiteBishop() reaches goal_white_king_bishop_fail_empty_3;
#assert whiteBishop() reaches goal_white_king_bishop_fail_empty_4;
#assert whiteBishop() reaches goal_white_king_bishop_fail_occupied_by_white_queen_bishop;
#assert whiteBishop() reaches goal_white_king_bishop_fail_empty_5;
#assert whiteBishop() reaches goal_white_king_bishop_fail_occupied_by_white_king;
#assert whiteBishop() reaches goal_white_king_bishop_fail_occupied_by_black_king;
#assert whiteBishop() reaches goal_white_king_bishop_fail_occupied_by_black_queen;
#assert whiteBishop() reaches goal_white_king_bishop_fail_occupied_by_black_pawn_5;
#assert whiteBishop() reaches goal_white_queen_bishop_fail_occupied_by_black_queen_knight;
#assert whiteBishop() reaches goal_white_queen_bishop_fail_empty_1;
#assert whiteBishop() reaches goal_white_queen_bishop_fail_empty_2;
#assert whiteBishop() reaches goal_white_queen_bishop_fail_empty_3;
#assert whiteBishop() reaches goal_white_queen_bishop_fail_empty_4;
#assert whiteBishop() reaches goal_white_queen_bishop_fail_occupied_by_white_king_bishop;
#assert whiteBishop() reaches goal_white_queen_bishop_fail_occupied_by_white_king;
#assert whiteBishop() reaches goal_white_queen_bishop_fail_occupied_by_black_king;
#assert whiteBishop() reaches goal_white_queen_bishop_fail_occupied_by_black_king_rook;
#assert whiteBishop() reaches goal_white_queen_bishop_fail_occupied_by_white_queen_rook;
#assert whiteBishop() reaches goal_white_queen_bishop_fail_occupied_by_white_queen;
#assert whiteBishop() reaches goal_white_queen_bishop_fail_occupied_by_black_queen_rook;
#assert whiteBishop() reaches goal_white_queen_bishop_fail_occupied_by_black_pawn_3;
#assert whiteBishop() reaches goal_white_queen_bishop_fail_occupied_by_white_pawn_4;
#assert whiteBishop() reaches goal_white_queen_bishop_fail_occupied_by_white_pawn_6;
#assert whiteBishop() reaches goal_white_queen_bishop_fail_occupied_by_black_pawn_1;
#assert whiteBishop() reaches goal_white_queen_bishop_fail_occupied_by_white_king_knight;



	
#define goal_white_king_bishop_fail_empty_1 actualBoard[RANK_6][FILE_H] == WHITE_KINGS_BISHOP;
#define goal_white_king_bishop_fail_occupied_by_black_pawn_7 actualBoard[RANK_5][FILE_G] == WHITE_KINGS_BISHOP;
#define goal_white_king_bishop_fail_empty_2 actualBoard[RANK_4][FILE_F] == WHITE_KINGS_BISHOP;
#define goal_white_king_bishop_fail_empty_3 actualBoard[RANK_3][FILE_E] == WHITE_KINGS_BISHOP;
#define goal_white_king_bishop_fail_empty_4 actualBoard[RANK_2][FILE_D] == WHITE_KINGS_BISHOP;
#define goal_white_king_bishop_fail_occupied_by_white_queen_bishop actualBoard[RANK_1][FILE_C] == WHITE_KINGS_BISHOP;
#define goal_white_king_bishop_fail_empty_5 actualBoard[RANK_1][FILE_A] == WHITE_KINGS_BISHOP;
#define goal_white_king_bishop_fail_occupied_by_white_king actualBoard[RANK_1][FILE_E] == WHITE_KINGS_BISHOP;
#define goal_white_king_bishop_fail_occupied_by_black_king actualBoard[RANK_8][FILE_E] == WHITE_KINGS_BISHOP;
#define goal_white_king_bishop_fail_occupied_by_black_queen actualBoard[RANK_7][FILE_D] == WHITE_KINGS_BISHOP;
#define goal_white_king_bishop_fail_occupied_by_black_pawn_5 actualBoard[RANK_7][FILE_E] == WHITE_KINGS_BISHOP;
#define goal_white_queen_bishop_fail_occupied_by_black_queen_knight actualBoard[RANK_6][FILE_A] == WHITE_QUEENS_BISHOP;
#define goal_white_queen_bishop_fail_empty_1 actualBoard[RANK_5][FILE_B] == WHITE_QUEENS_BISHOP;
#define goal_white_queen_bishop_fail_empty_2 actualBoard[RANK_4][FILE_C] == WHITE_QUEENS_BISHOP;
#define goal_white_queen_bishop_fail_empty_3 actualBoard[RANK_3][FILE_D] == WHITE_QUEENS_BISHOP;
#define goal_white_queen_bishop_fail_empty_4 actualBoard[RANK_2][FILE_E] == WHITE_QUEENS_BISHOP;
#define goal_white_queen_bishop_fail_occupied_by_white_king_bishop actualBoard[RANK_1][FILE_F] == WHITE_QUEENS_BISHOP;
#define goal_white_queen_bishop_fail_occupied_by_white_king actualBoard[RANK_1][FILE_E] == WHITE_QUEENS_BISHOP;
#define goal_white_queen_bishop_fail_occupied_by_black_king actualBoard[RANK_8][FILE_E] == WHITE_QUEENS_BISHOP;
#define goal_white_queen_bishop_fail_occupied_by_black_king_rook actualBoard[RANK_1][FILE_H] == WHITE_QUEENS_BISHOP;
#define goal_white_queen_bishop_fail_occupied_by_white_queen_rook actualBoard[RANK_2][FILE_A] == WHITE_QUEENS_BISHOP;
#define goal_white_queen_bishop_fail_occupied_by_white_queen actualBoard[RANK_4][FILE_E] == WHITE_QUEENS_BISHOP;
#define goal_white_queen_bishop_fail_occupied_by_black_queen_rook actualBoard[RANK_5][FILE_A] == WHITE_QUEENS_BISHOP;
#define goal_white_queen_bishop_fail_occupied_by_black_pawn_3 actualBoard[RANK_6][FILE_C] == WHITE_QUEENS_BISHOP;
#define goal_white_queen_bishop_fail_occupied_by_white_pawn_4 actualBoard[RANK_6][FILE_D] == WHITE_QUEENS_BISHOP;
#define goal_white_queen_bishop_fail_occupied_by_white_pawn_6 actualBoard[RANK_6][FILE_F] == WHITE_QUEENS_BISHOP;
#define goal_white_queen_bishop_fail_occupied_by_black_pawn_1 actualBoard[RANK_7][FILE_A] == WHITE_QUEENS_BISHOP;
#define goal_white_queen_bishop_fail_occupied_by_white_king_knight actualBoard[RANK_7][FILE_F] == WHITE_QUEENS_BISHOP;

moveBlackBishop() = changeTurnToBlackBishop{currentTurn = BLACK_TURN;} -> blackBishop();
