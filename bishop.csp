#include "board.csp";

whiteBishop() = whiteBishopUpLeft() [] whiteBishopUpRight() [] whiteBishopDownLeft() [] whiteBishopDownRight();

whiteBishopUpLeft() = whiteQueensBishopUpLeft() [] whiteKingsBishopUpLeft();
whiteBishopUpRight() = whiteQueensBishopUpRight() [] whiteKingsBishopUpRight();
whiteBishopDownLeft() = whiteQueensBishopDownLeft() [] whiteKingsBishopDownLeft();
whiteBishopDownRight() = whiteQueensBishopDownRight() [] whiteKingsBishopDownRight();

whiteQueensBishopUpLeft() = [currentTurn == WHITE_TURN]moveContinuous(WHITE_QUEENS_BISHOP, 1, -1);
whiteQueensBishopUpRight() = [currentTurn == WHITE_TURN]moveContinuous(WHITE_QUEENS_BISHOP, 1, 1);
whiteQueensBishopDownLeft() = [currentTurn == WHITE_TURN]moveContinuous(WHITE_QUEENS_BISHOP, -1, -1);
whiteQueensBishopDownRight() = [currentTurn == WHITE_TURN]moveContinuous(WHITE_QUEENS_BISHOP, -1, 1);

whiteKingsBishopUpLeft() = [currentTurn == WHITE_TURN]moveContinuous(WHITE_KINGS_BISHOP, 1, -1);
whiteKingsBishopUpRight() = [currentTurn == WHITE_TURN]moveContinuous(WHITE_KINGS_BISHOP, 1, 1);
whiteKingsBishopDownLeft() = [currentTurn == WHITE_TURN]moveContinuous(WHITE_KINGS_BISHOP, -1, -1);
whiteKingsBishopDownRight() = [currentTurn == WHITE_TURN]moveContinuous(WHITE_KINGS_BISHOP, -1, 1);					 

blackBishop() = blackBishopUpLeft() [] blackBishopUpRight() [] blackBishopDownLeft() [] blackBishopDownRight();

blackBishopUpLeft() = blackQueensBishopUpLeft() [] blackKingsBishopUpLeft();
blackBishopUpRight() = blackQueensBishopUpRight() [] blackKingsBishopUpRight();
blackBishopDownLeft() = blackQueensBishopDownLeft() [] blackKingsBishopDownLeft();
blackBishopDownRight() = blackQueensBishopDownRight() [] blackKingsBishopDownRight();

blackQueensBishopUpLeft() = [currentTurn == BLACK_TURN]moveContinuous(BLACK_QUEENS_BISHOP, 1, -1);
blackQueensBishopUpRight() = [currentTurn == BLACK_TURN]moveContinuous(BLACK_QUEENS_BISHOP, 1, 1);
blackQueensBishopDownLeft() = [currentTurn == BLACK_TURN]moveContinuous(BLACK_QUEENS_BISHOP, -1, -1);
blackQueensBishopDownRight() = [currentTurn == BLACK_TURN]moveContinuous(BLACK_QUEENS_BISHOP, -1, 1);

blackKingsBishopUpLeft() = [currentTurn == BLACK_TURN]moveContinuous(BLACK_KINGS_BISHOP, 1, -1);
blackKingsBishopUpRight() = [currentTurn == BLACK_TURN]moveContinuous(BLACK_KINGS_BISHOP, 1, 1);
blackKingsBishopDownLeft() = [currentTurn == BLACK_TURN]moveContinuous(BLACK_KINGS_BISHOP, -1, -1);
blackKingsBishopDownRight() = [currentTurn == BLACK_TURN]moveContinuous(BLACK_KINGS_BISHOP, -1, 1);

moveBlackBishop() = changeTurnToBlack{currentTurn = BLACK_TURN} -> blackBishop();

#define goalSuccessWhiteQueensBishopUpLeft actualBoard[RANK_3][FILE_A] == WHITE_QUEENS_BISHOP && 
										piecePosition[WHITE_QUEENS_BISHOP][RANK] == RANK_3 && piecePosition[WHITE_QUEENS_BISHOP][FILE] == FILE_A;
#define goalSuccessWhiteQueensBishopUpRightEnemyPiece actualBoard[RANK_5][FILE_G] == WHITE_QUEENS_BISHOP && 
										piecePosition[WHITE_QUEENS_BISHOP][RANK] == RANK_5 && piecePosition[WHITE_QUEENS_BISHOP][FILE] == FILE_G;
#define goalFailureWhiteQueensBishopUpRightBehindEnemyPiece actualBoard[RANK_6][FILE_H] == WHITE_QUEENS_BISHOP && 
										piecePosition[WHITE_QUEENS_BISHOP][RANK] == RANK_6 && piecePosition[WHITE_QUEENS_BISHOP][FILE] == FILE_H;
#define goalSuccessWhiteKingsBishopUpLeftEnemyPiece actualBoard[RANK_6][FILE_A] == WHITE_KINGS_BISHOP && 
										piecePosition[WHITE_KINGS_BISHOP][RANK] == RANK_6 && piecePosition[WHITE_KINGS_BISHOP][FILE] == FILE_A;
#define goalSuccessWhiteKingsBishopUpRight actualBoard[RANK_3][FILE_H] == WHITE_KINGS_BISHOP && 
										piecePosition[WHITE_KINGS_BISHOP][RANK] == RANK_3 && piecePosition[WHITE_KINGS_BISHOP][FILE] == FILE_H;
#define goalFailureWhiteKingsBishopMoveNotPossible1 actualBoard[RANK_7][FILE_B] == WHITE_KINGS_BISHOP && 
										piecePosition[WHITE_KINGS_BISHOP][RANK] == RANK_7 && piecePosition[WHITE_KINGS_BISHOP][FILE] == FILE_B;

#define goalSuccessBlackKingsBishopDownLeft actualBoard[RANK_3][FILE_A] == BLACK_KINGS_BISHOP &&
										piecePosition[BLACK_KINGS_BISHOP][RANK] == RANK_3 && piecePosition[BLACK_KINGS_BISHOP][FILE] == FILE_A;
#define goalSuccessBlackKingsBishopDownRight actualBoard[RANK_2][FILE_F] == BLACK_KINGS_BISHOP &&
										piecePosition[BLACK_KINGS_BISHOP][RANK] == RANK_2 && piecePosition[BLACK_KINGS_BISHOP][FILE] == FILE_F;
#define goalFailureBlackKingsBishopMoveNotPossible1 actualBoard[RANK_3][FILE_C] == BLACK_KINGS_BISHOP &&
										piecePosition[BLACK_KINGS_BISHOP][RANK] == RANK_3 && piecePosition[BLACK_KINGS_BISHOP][FILE] == FILE_C;
#define goalFailureBlackKingsBishopMoveNotPossible2 actualBoard[RANK_5][FILE_D] == BLACK_KINGS_BISHOP &&
										piecePosition[BLACK_KINGS_BISHOP][RANK] == RANK_5 && piecePosition[BLACK_KINGS_BISHOP][FILE] == FILE_D;
#define goalSuccessBlackKingsBishopUpLeft actualBoard[RANK_6][FILE_B] == BLACK_KINGS_BISHOP &&
										piecePosition[BLACK_KINGS_BISHOP][RANK] == RANK_6 && piecePosition[BLACK_KINGS_BISHOP][FILE] == FILE_B;
#define goalFailureBlackKingsBishopUpLeftSelfPiece actualBoard[RANK_7][FILE_A] == BLACK_KINGS_BISHOP &&
										piecePosition[BLACK_KINGS_BISHOP][RANK] == RANK_7 && piecePosition[BLACK_KINGS_BISHOP][FILE] == FILE_A;
#define goalSuccessBlackKingsBishopUpRightEnemyPiece actualBoard[RANK_6][FILE_D] == BLACK_KINGS_BISHOP &&
										piecePosition[BLACK_KINGS_BISHOP][RANK] == RANK_6 && piecePosition[BLACK_KINGS_BISHOP][FILE] == FILE_D;
#define goalFailureBlackKingsBishopUpRightBehindEnemyPiece actualBoard[RANK_7][FILE_E] == BLACK_KINGS_BISHOP &&
										piecePosition[BLACK_KINGS_BISHOP][RANK] == RANK_7 && piecePosition[BLACK_KINGS_BISHOP][FILE] == FILE_E;
#define goalFailureBlackKingsBishopUpRightBehindSelfPiece actualBoard[RANK_8][FILE_F] == BLACK_KINGS_BISHOP &&
										piecePosition[BLACK_KINGS_BISHOP][RANK] == RANK_8 && piecePosition[BLACK_KINGS_BISHOP][FILE] == FILE_F;

#assert whiteBishop() reaches goalSuccessWhiteQueensBishopUpLeft;
#assert whiteBishop() reaches goalSuccessWhiteQueensBishopUpRightEnemyPiece;
#assert whiteBishop() reaches goalFailureWhiteQueensBishopUpRightBehindEnemyPiece;
#assert whiteBishop() reaches goalSuccessWhiteKingsBishopUpLeftEnemyPiece;
#assert whiteBishop() reaches goalSuccessWhiteKingsBishopUpRight;
#assert whiteBishop() reaches goalFailureWhiteKingsBishopMoveNotPossible1;

#assert moveBlackBishop() reaches goalSuccessBlackKingsBishopDownLeft;
#assert moveBlackBishop() reaches goalSuccessBlackKingsBishopDownRight;
#assert moveBlackBishop() reaches goalFailureBlackKingsBishopMoveNotPossible1;
#assert moveBlackBishop() reaches goalFailureBlackKingsBishopMoveNotPossible2;
#assert moveBlackBishop() reaches goalSuccessBlackKingsBishopUpLeft;
#assert moveBlackBishop() reaches goalFailureBlackKingsBishopUpLeftSelfPiece;
#assert moveBlackBishop() reaches goalSuccessBlackKingsBishopUpRightEnemyPiece;
#assert moveBlackBishop() reaches goalFailureBlackKingsBishopUpRightBehindEnemyPiece;
#assert moveBlackBishop() reaches goalFailureBlackKingsBishopUpRightBehindSelfPiece;
