#include "move.csp";

whiteBishop() =  whiteBishopMove(1) [] whiteBishopMove(2) [] whiteBishopMove(3) [] whiteBishopMove(4) [] whiteBishopMove(5) [] whiteBishopMove(6) [] whiteBishopMove(7);

whiteBishopMove(i) = whiteBishopUpLeft(i) [] whiteBishopUpRight(i) [] whiteBishopDownLeft(i) [] whiteBishopDownRight(i);

whiteBishopUpLeft(i) = whiteQueensBishopUpLeft(i) [] whiteKingsBishopUpLeft(i);
whiteBishopUpRight(i) = whiteQueensBishopUpRight(i) [] whiteKingsBishopUpRight(i);
whiteBishopDownLeft(i) = whiteQueensBishopDownLeft(i) [] whiteKingsBishopDownLeft(i);
whiteBishopDownRight(i) = whiteQueensBishopDownRight(i) [] whiteKingsBishopDownRight(i);

whiteQueensBishopUpLeft(i) = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_QUEENS_BISHOP][RANK], piecePosition[WHITE_QUEENS_BISHOP][FILE], i, -i)]movePiece(WHITE_QUEENS_BISHOP, i, -i);
whiteQueensBishopUpRight(i) = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_QUEENS_BISHOP][RANK], piecePosition[WHITE_QUEENS_BISHOP][FILE], i, i)]movePiece(WHITE_QUEENS_BISHOP, i, i);
whiteQueensBishopDownLeft(i) = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_QUEENS_BISHOP][RANK], piecePosition[WHITE_QUEENS_BISHOP][FILE], -i, -i)]movePiece(WHITE_QUEENS_BISHOP, -i, -i);
whiteQueensBishopDownRight(i) = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_QUEENS_BISHOP][RANK], piecePosition[WHITE_QUEENS_BISHOP][FILE], -i, i)]movePiece(WHITE_QUEENS_BISHOP, -i, i);

whiteKingsBishopUpLeft(i) = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_KINGS_BISHOP][RANK], piecePosition[WHITE_KINGS_BISHOP][FILE], i, -i)]movePiece(WHITE_KINGS_BISHOP, i, -i);
whiteKingsBishopUpRight(i) = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_KINGS_BISHOP][RANK], piecePosition[WHITE_KINGS_BISHOP][FILE], i, i)]movePiece(WHITE_KINGS_BISHOP, i, i);
whiteKingsBishopDownLeft(i) = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_KINGS_BISHOP][RANK], piecePosition[WHITE_KINGS_BISHOP][FILE], -i, -i)]movePiece(WHITE_KINGS_BISHOP, -i, -i);
whiteKingsBishopDownRight(i) = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_KINGS_BISHOP][RANK], piecePosition[WHITE_KINGS_BISHOP][FILE], -i, i)]movePiece(WHITE_KINGS_BISHOP, -i, i);					 

blackBishop() = blackBishopMove(1) [] blackBishopMove(2) [] blackBishopMove(3) [] blackBishopMove(4) [] blackBishopMove(5) [] blackBishopMove(6) [] blackBishopMove(7);

blackBishopMove(i) = blackBishopUpLeft(i) [] blackBishopUpRight(i) [] blackBishopDownLeft(i) [] blackBishopDownRight(i);

blackBishopUpLeft(i) = blackQueensBishopUpLeft(i) [] blackKingsBishopUpLeft(i);
blackBishopUpRight(i) = blackQueensBishopUpRight(i) [] blackKingsBishopUpRight(i);
blackBishopDownLeft(i) = blackQueensBishopDownLeft(i) [] blackKingsBishopDownLeft(i);
blackBishopDownRight(i) = blackQueensBishopDownRight(i) [] blackKingsBishopDownRight(i);

blackQueensBishopUpLeft(i) = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_QUEENS_BISHOP][RANK], piecePosition[BLACK_QUEENS_BISHOP][FILE], i, -i)]movePiece(BLACK_QUEENS_BISHOP, i, -i);
blackQueensBishopUpRight(i) = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_QUEENS_BISHOP][RANK], piecePosition[BLACK_QUEENS_BISHOP][FILE], i, i)]movePiece(BLACK_QUEENS_BISHOP, i, i);
blackQueensBishopDownLeft(i) = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_QUEENS_BISHOP][RANK], piecePosition[BLACK_QUEENS_BISHOP][FILE], -i, -i)]movePiece(BLACK_QUEENS_BISHOP, -i, -i);
blackQueensBishopDownRight(i) = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_QUEENS_BISHOP][RANK], piecePosition[BLACK_QUEENS_BISHOP][FILE], -i, i)]movePiece(BLACK_QUEENS_BISHOP, -i, i);

blackKingsBishopUpLeft(i) = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_KINGS_BISHOP][RANK], piecePosition[BLACK_KINGS_BISHOP][FILE], i, -i)]movePiece(BLACK_KINGS_BISHOP, i, -i);
blackKingsBishopUpRight(i) = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_KINGS_BISHOP][RANK], piecePosition[BLACK_KINGS_BISHOP][FILE], i, i)]movePiece(BLACK_KINGS_BISHOP, i, i);
blackKingsBishopDownLeft(i) = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_KINGS_BISHOP][RANK], piecePosition[BLACK_KINGS_BISHOP][FILE], -i, -i)]movePiece(BLACK_KINGS_BISHOP, -i, -i);
blackKingsBishopDownRight(i) = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_KINGS_BISHOP][RANK], piecePosition[BLACK_KINGS_BISHOP][FILE], -i, i)]movePiece(BLACK_KINGS_BISHOP, -i, i);

moveBlackBishop() = changeTurnToBlack{currentTurn = BLACK_TURN} -> blackBishop();

#define goalSuccessWhiteQueensBishopUpLeft actualBoard[RANK_3][FILE_A] == WHITE_QUEENS_BISHOP && 
										piecePosition[WHITE_QUEENS_BISHOP][RANK] == RANK_3 && piecePosition[WHITE_QUEENS_BISHOP][FILE] == FILE_A;
#define goalSuccessWhiteQueensBishopUpRightEnemyPiece actualBoard[RANK_5][FILE_G] == WHITE_QUEENS_BISHOP && 
										piecePosition[WHITE_QUEENS_BISHOP][RANK] == RANK_5 && piecePosition[WHITE_QUEENS_BISHOP][FILE] == FILE_G;
#define goalFailureWhiteQueensBishopUpRightBehindEnemyPiece actualBoard[RANK_6][FILE_H] == WHITE_QUEENS_BISHOP && 
										piecePosition[WHITE_QUEENS_BISHOP][RANK] == RANK_6 && piecePosition[WHITE_QUEENS_BISHOP][FILE] == FILE_H;
#define goalSuccessWhiteKingsBishopUpLeftEnemyPiece actualBoard[RANK_6][FILE_A] == WHITE_KINGS_BISHOP && 
										piecePosition[WHITE_KINGS_BISHOP][RANK] == RANK_6 && piecePosition[WHITE_KINGS_BISHOP][FILE] == FILE_A;
#define goalSuccessWhiteKingsBishopUpRight actualBoard[RANK_3][FILE_H] == WHITE_KINGS_BISHOP && 
										piecePosition[WHITE_KINGS_BISHOP][RANK] == RANK_3 && piecePosition[WHITE_KINGS_BISHOP][FILE] == FILE_H;
#define goalFailureWhiteKingsBishopMoveNotPossible1 actualBoard[RANK_7][FILE_B] == WHITE_KINGS_BISHOP && 
										piecePosition[WHITE_KINGS_BISHOP][RANK] == RANK_7 && piecePosition[WHITE_KINGS_BISHOP][FILE] == FILE_B;

#define goalSuccessBlackKingsBishopDownLeft actualBoard[RANK_3][FILE_A] == BLACK_KINGS_BISHOP &&
										piecePosition[BLACK_KINGS_BISHOP][RANK] == RANK_3 && piecePosition[BLACK_KINGS_BISHOP][FILE] == FILE_A;
#define goalSuccessBlackKingsBishopDownRight actualBoard[RANK_2][FILE_F] == BLACK_KINGS_BISHOP &&
										piecePosition[BLACK_KINGS_BISHOP][RANK] == RANK_2 && piecePosition[BLACK_KINGS_BISHOP][FILE] == FILE_F;
#define goalFailureBlackKingsBishopMoveNotPossible1 actualBoard[RANK_3][FILE_C] == BLACK_KINGS_BISHOP &&
										piecePosition[BLACK_KINGS_BISHOP][RANK] == RANK_3 && piecePosition[BLACK_KINGS_BISHOP][FILE] == FILE_C;
#define goalFailureBlackKingsBishopMoveNotPossible2 actualBoard[RANK_5][FILE_D] == BLACK_KINGS_BISHOP &&
										piecePosition[BLACK_KINGS_BISHOP][RANK] == RANK_5 && piecePosition[BLACK_KINGS_BISHOP][FILE] == FILE_D;
#define goalSuccessBlackKingsBishopUpLeft actualBoard[RANK_6][FILE_B] == BLACK_KINGS_BISHOP &&
										piecePosition[BLACK_KINGS_BISHOP][RANK] == RANK_6 && piecePosition[BLACK_KINGS_BISHOP][FILE] == FILE_B;
#define goalFailureBlackKingsBishopUpLeftSelfPiece actualBoard[RANK_7][FILE_A] == BLACK_KINGS_BISHOP &&
										piecePosition[BLACK_KINGS_BISHOP][RANK] == RANK_7 && piecePosition[BLACK_KINGS_BISHOP][FILE] == FILE_A;
#define goalSuccessBlackKingsBishopUpRightEnemyPiece actualBoard[RANK_6][FILE_D] == BLACK_KINGS_BISHOP &&
										piecePosition[BLACK_KINGS_BISHOP][RANK] == RANK_6 && piecePosition[BLACK_KINGS_BISHOP][FILE] == FILE_D;
#define goalFailureBlackKingsBishopUpRightBehindEnemyPiece actualBoard[RANK_7][FILE_E] == BLACK_KINGS_BISHOP &&
										piecePosition[BLACK_KINGS_BISHOP][RANK] == RANK_7 && piecePosition[BLACK_KINGS_BISHOP][FILE] == FILE_E;
#define goalFailureBlackKingsBishopUpRightBehindSelfPiece actualBoard[RANK_8][FILE_F] == BLACK_KINGS_BISHOP &&
										piecePosition[BLACK_KINGS_BISHOP][RANK] == RANK_8 && piecePosition[BLACK_KINGS_BISHOP][FILE] == FILE_F;

#assert whiteBishop() reaches goalSuccessWhiteQueensBishopUpLeft;
#assert whiteBishop() reaches goalSuccessWhiteQueensBishopUpRightEnemyPiece;
#assert whiteBishop() reaches goalFailureWhiteQueensBishopUpRightBehindEnemyPiece;
#assert whiteBishop() reaches goalSuccessWhiteKingsBishopUpLeftEnemyPiece;
#assert whiteBishop() reaches goalSuccessWhiteKingsBishopUpRight;
#assert whiteBishop() reaches goalFailureWhiteKingsBishopMoveNotPossible1;

#assert moveBlackBishop() reaches goalSuccessBlackKingsBishopDownLeft;
#assert moveBlackBishop() reaches goalSuccessBlackKingsBishopDownRight;
#assert moveBlackBishop() reaches goalFailureBlackKingsBishopMoveNotPossible1;
#assert moveBlackBishop() reaches goalFailureBlackKingsBishopMoveNotPossible2;
#assert moveBlackBishop() reaches goalSuccessBlackKingsBishopUpLeft;
#assert moveBlackBishop() reaches goalFailureBlackKingsBishopUpLeftSelfPiece;
#assert moveBlackBishop() reaches goalSuccessBlackKingsBishopUpRightEnemyPiece;
#assert moveBlackBishop() reaches goalFailureBlackKingsBishopUpRightBehindEnemyPiece;
#assert moveBlackBishop() reaches goalFailureBlackKingsBishopUpRightBehindSelfPiece;
