#include "testboard1.csp";
#include "rook.csp";
#include "king.csp";
#include "queen.csp";
#include "bishop.csp";
#include "pawn.csp";
#include "knight.csp";

#import "ValidityCheck";

// checkStatus = [whiteStatus, blackStatus]
var checkStatus[2] = [0,0];

game() = whiteMove();
whiteMove() = whitePlan();
blackMove() = blackPlan();

whitePlan() = whiteKing() [] whiteQueen() [] whiteRook() [] whiteBishop() [] whiteKnights() [] whitePawn();
blackPlan() = blackKing() [] blackQueen() [] blackRook() [] blackBishop() [] blackKnights() [] blackPawn();

execute = if(currentTurn == 0){
	if(call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE])){
		turn {
			// current player no longer in check if move was legal
			checkStatus[currentTurn] = 0;
			// change turn
			currentTurn = 1 - currentTurn;		 
		} -> blackInCheck
	}
	else
	{
		if(call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE])){
			turn {
				// current player no longer in check if move was legal
				checkStatus[currentTurn] = 0;
				// change turn
				currentTurn = 1 - currentTurn;		 
			} -> whiteInCheck
		}
	}
};

blackInCheck = if (call(isCheck, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE])) {
			check {checkStatus[currentTurn] = 1;} -> blackMove()
		};

whiteInCheck = if (call(isCheck, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE])) {
			check {checkStatus[currentTurn] = 1;} -> whiteMove()
		};
		
#define goal_queen actualBoard[RANK_1][FILE_D] == WHITE_QUEEN && 
								piecePosition[WHITE_QUEEN][RANK] == RANK_1 && piecePosition[WHITE_QUEEN][FILE] == FILE_D;
#assert game() reaches goal_queen;								
#define goal currentTurn == 1;
#assert game() reaches goal;