#include "rook.csp";
#include "king.csp";
#include "queen.csp";
#include "bishop.csp";
#include "pawn.csp";
#include "knight.csp";

//#include "testboard1.csp";
//#include "board1.csp";
//#include "board2.csp";
//#include "board3.csp";
//#include "board4.csp";
//#include "board5.csp";
//#include "board6.csp";
//#include "board7.csp";
//#include "board8.csp";
//#include "board10.csp";
//#include "board11.csp";
#include "board12.csp";

#import "ValidityCheck";

// the game starts with white to play
whiteGame() = initialiseTurn{currentTurn = WHITE_TURN} -> whiteMove();
blackGame() = initialiseTurn{currentTurn = BLACK_TURN} -> blackMove();

whiteMove() = [numMoves <= 2] whitePlan();
blackMove() = [numMoves <= 2] blackPlan();

// each side can move any of its pieces
whitePlan() = whiteKing() [] whiteRook() [] whiteQueen() [] whiteBishop() [] whitePawn() [] whiteKnights();
blackPlan() = blackKing() [] blackRook() [] blackQueen() [] blackBishop() [] blackPawn() [] blackKnights();

// updates the check status for the side that is about to play
blackInCheck = [call(isCheck, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE])]
			blackIsInCheck {checkStatus[currentTurn] = 1;} -> blackMove()
			[]
			[!call(isCheck, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE])]
			blackIsNotInCheck {checkStatus[currentTurn] = 0;} -> blackMove();

whiteInCheck = [call(isCheck, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE])]
			whiteIsInCheck {checkStatus[currentTurn] = 1;} -> whiteMove()
			[]
			[!call(isCheck, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE])]
			whiteIsNotInCheck {checkStatus[currentTurn] = 0;} -> whiteMove();

#define blackNotInCheck checkStatus[1] == 0;
#define whiteNotInCheck checkStatus[0] == 0;
#define twoMovesElapsed numMoves >= 2;

// assertion for white's one-move checkmate
#assert whiteGame() |= <>[](twoMovesElapsed || blackNotInCheck);
// assertion for black's one-move checkmate
#assert blackGame() |= <>[](twoMovesElapsed || whiteNotInCheck);