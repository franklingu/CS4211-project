/* king.csp
 * This code takes care of the movement for both black and white king.
 * Each move is split into 8 different directions of one unit.
 */
 
#include "move.csp";

//===========================================================================//
// black king
//===========================================================================//
blackKingUp() = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], 1, 0)]movePiece(BLACK_KING, 1, 0);
blackKingDown() = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], -1, 0)]movePiece(BLACK_KING, -1, 0);
blackKingRight() = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], 0, 1)]movePiece(BLACK_KING, 0, 1);
blackKingLeft() = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], 0, -1)]movePiece(BLACK_KING, 0, -1);
blackKingUpLeft() = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], 1, -1)]movePiece(BLACK_KING, 1, -1);
blackKingUpRight() = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], 1, 1)]movePiece(BLACK_KING, 1, 1);
blackKingDownLeft() = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], -1, -1)]movePiece(BLACK_KING, -1, -1);
blackKingDownRight() = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], -1, 1)]movePiece(BLACK_KING, -1, 1);

blackKing() = blackKingUp() [] blackKingRight() [] blackKingDown() [] blackKingLeft() []
              blackKingUpLeft() [] blackKingUpRight() [] blackKingDownLeft() [] blackKingDownRight();

//===========================================================================//
// white king
//===========================================================================//
whiteKingUp() = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], 1, 0)]movePiece(WHITE_KING, 1, 0);
whiteKingDown() = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], -1, 0)]movePiece(WHITE_KING, -1, 0);
whiteKingRight() = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], 0, 1)]movePiece(WHITE_KING, 0, 1);
whiteKingLeft() = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], 0, -1)]movePiece(WHITE_KING, 0, -1);
whiteKingUpLeft() = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], 1, -1)]movePiece(WHITE_KING, 1, -1);
whiteKingUpRight() = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], 1, 1)]movePiece(WHITE_KING, 1, 1);
whiteKingDownLeft() = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], -1, -1)]movePiece(WHITE_KING, -1, -1);
whiteKingDownRight() = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], -1, 1)]movePiece(WHITE_KING, -1, 1);

whiteKing() = whiteKingUp() [] whiteKingRight() [] whiteKingDown() [] whiteKingLeft() []
              whiteKingUpLeft() [] whiteKingUpRight() [] whiteKingDownLeft() [] whiteKingDownRight();