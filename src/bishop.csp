/* bishop.csp
 * This code takes care of the movement for both black and white bishops.
 * Each move is split into 7 units of movement, then split further into four diagonal directions.
 */

#include "move.csp";

//===========================================================================//
// white bishops
//===========================================================================//
whiteBishop() =  whiteBishopMove(1) [] whiteBishopMove(2) [] whiteBishopMove(3) [] whiteBishopMove(4) [] whiteBishopMove(5) [] whiteBishopMove(6) [] whiteBishopMove(7);

whiteBishopMove(i) = whiteBishopUpLeft(i) [] whiteBishopUpRight(i) [] whiteBishopDownLeft(i) [] whiteBishopDownRight(i);

whiteBishopUpLeft(i) = whiteQueensBishopUpLeft(i) [] whiteKingsBishopUpLeft(i);
whiteBishopUpRight(i) = whiteQueensBishopUpRight(i) [] whiteKingsBishopUpRight(i);
whiteBishopDownLeft(i) = whiteQueensBishopDownLeft(i) [] whiteKingsBishopDownLeft(i);
whiteBishopDownRight(i) = whiteQueensBishopDownRight(i) [] whiteKingsBishopDownRight(i);

whiteQueensBishopUpLeft(i) = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_QUEENS_BISHOP][RANK], piecePosition[WHITE_QUEENS_BISHOP][FILE], i, -i)]movePiece(WHITE_QUEENS_BISHOP, i, -i);
whiteQueensBishopUpRight(i) = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_QUEENS_BISHOP][RANK], piecePosition[WHITE_QUEENS_BISHOP][FILE], i, i)]movePiece(WHITE_QUEENS_BISHOP, i, i);
whiteQueensBishopDownLeft(i) = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_QUEENS_BISHOP][RANK], piecePosition[WHITE_QUEENS_BISHOP][FILE], -i, -i)]movePiece(WHITE_QUEENS_BISHOP, -i, -i);
whiteQueensBishopDownRight(i) = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_QUEENS_BISHOP][RANK], piecePosition[WHITE_QUEENS_BISHOP][FILE], -i, i)]movePiece(WHITE_QUEENS_BISHOP, -i, i);

whiteKingsBishopUpLeft(i) = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_KINGS_BISHOP][RANK], piecePosition[WHITE_KINGS_BISHOP][FILE], i, -i)]movePiece(WHITE_KINGS_BISHOP, i, -i);
whiteKingsBishopUpRight(i) = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_KINGS_BISHOP][RANK], piecePosition[WHITE_KINGS_BISHOP][FILE], i, i)]movePiece(WHITE_KINGS_BISHOP, i, i);
whiteKingsBishopDownLeft(i) = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_KINGS_BISHOP][RANK], piecePosition[WHITE_KINGS_BISHOP][FILE], -i, -i)]movePiece(WHITE_KINGS_BISHOP, -i, -i);
whiteKingsBishopDownRight(i) = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_KINGS_BISHOP][RANK], piecePosition[WHITE_KINGS_BISHOP][FILE], -i, i)]movePiece(WHITE_KINGS_BISHOP, -i, i);					 

//===========================================================================//
// black bishops
//===========================================================================//
blackBishop() = blackBishopMove(1) [] blackBishopMove(2) [] blackBishopMove(3) [] blackBishopMove(4) [] blackBishopMove(5) [] blackBishopMove(6) [] blackBishopMove(7);

blackBishopMove(i) = blackBishopUpLeft(i) [] blackBishopUpRight(i) [] blackBishopDownLeft(i) [] blackBishopDownRight(i);

blackBishopUpLeft(i) = blackQueensBishopUpLeft(i) [] blackKingsBishopUpLeft(i);
blackBishopUpRight(i) = blackQueensBishopUpRight(i) [] blackKingsBishopUpRight(i);
blackBishopDownLeft(i) = blackQueensBishopDownLeft(i) [] blackKingsBishopDownLeft(i);
blackBishopDownRight(i) = blackQueensBishopDownRight(i) [] blackKingsBishopDownRight(i);

blackQueensBishopUpLeft(i) = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_QUEENS_BISHOP][RANK], piecePosition[BLACK_QUEENS_BISHOP][FILE], i, -i)]movePiece(BLACK_QUEENS_BISHOP, i, -i);
blackQueensBishopUpRight(i) = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_QUEENS_BISHOP][RANK], piecePosition[BLACK_QUEENS_BISHOP][FILE], i, i)]movePiece(BLACK_QUEENS_BISHOP, i, i);
blackQueensBishopDownLeft(i) = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_QUEENS_BISHOP][RANK], piecePosition[BLACK_QUEENS_BISHOP][FILE], -i, -i)]movePiece(BLACK_QUEENS_BISHOP, -i, -i);
blackQueensBishopDownRight(i) = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_QUEENS_BISHOP][RANK], piecePosition[BLACK_QUEENS_BISHOP][FILE], -i, i)]movePiece(BLACK_QUEENS_BISHOP, -i, i);

blackKingsBishopUpLeft(i) = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_KINGS_BISHOP][RANK], piecePosition[BLACK_KINGS_BISHOP][FILE], i, -i)]movePiece(BLACK_KINGS_BISHOP, i, -i);
blackKingsBishopUpRight(i) = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_KINGS_BISHOP][RANK], piecePosition[BLACK_KINGS_BISHOP][FILE], i, i)]movePiece(BLACK_KINGS_BISHOP, i, i);
blackKingsBishopDownLeft(i) = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_KINGS_BISHOP][RANK], piecePosition[BLACK_KINGS_BISHOP][FILE], -i, -i)]movePiece(BLACK_KINGS_BISHOP, -i, -i);
blackKingsBishopDownRight(i) = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_KINGS_BISHOP][RANK], piecePosition[BLACK_KINGS_BISHOP][FILE], -i, i)]movePiece(BLACK_KINGS_BISHOP, -i, i);

moveBlackBishop() = changeTurnToBlack{currentTurn = BLACK_TURN} -> blackBishop();