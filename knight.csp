#include "board.csp";

blackKingsKnightUpLeft1() = [currentTurn == BLACK_TURN]moveOnce(BLACK_KINGS_KNIGHT, 1, -2);
blackKingsKnightUpLeft2() = [currentTurn == BLACK_TURN]moveOnce(BLACK_KINGS_KNIGHT, 2, -1);
blackKingsKnightUpRight1() = [currentTurn == BLACK_TURN]moveOnce(BLACK_KINGS_KNIGHT, 1, 2);
blackKingsKnightUpRight2() = [currentTurn == BLACK_TURN]moveOnce(BLACK_KINGS_KNIGHT, 2, 1);
blackKingsKnightDownLeft1() = [currentTurn == BLACK_TURN]moveOnce(BLACK_KINGS_KNIGHT, -1, -2);
blackKingsKnightDownLeft2() = [currentTurn == BLACK_TURN]moveOnce(BLACK_KINGS_KNIGHT, -2, -1);
blackKingsKnightDownRight1() = [currentTurn == BLACK_TURN]moveOnce(BLACK_KINGS_KNIGHT, -1, 2);
blackKingsKnightDownRight2() = [currentTurn == BLACK_TURN]moveOnce(BLACK_KINGS_KNIGHT, -2, 1);

blackQueensKnightUpLeft1() = [currentTurn == BLACK_TURN]moveOnce(BLACK_QUEENS_KNIGHT, 1, -2);
blackQueensKnightUpLeft2() = [currentTurn == BLACK_TURN]moveOnce(BLACK_QUEENS_KNIGHT, 2, -1);
blackQueensKnightUpRight1() = [currentTurn == BLACK_TURN]moveOnce(BLACK_QUEENS_KNIGHT, 1, 2);
blackQueensKnightUpRight2() = [currentTurn == BLACK_TURN]moveOnce(BLACK_QUEENS_KNIGHT, 2, 1);
blackQueensKnightDownLeft1() = [currentTurn == BLACK_TURN]moveOnce(BLACK_QUEENS_KNIGHT, -1, -2);
blackQueensKnightDownLeft2() = [currentTurn == BLACK_TURN]moveOnce(BLACK_QUEENS_KNIGHT, -2, -1);
blackQueensKnightDownRight1() = [currentTurn == BLACK_TURN]moveOnce(BLACK_QUEENS_KNIGHT, -1, 2);
blackQueensKnightDownRight2() = [currentTurn == BLACK_TURN]moveOnce(BLACK_QUEENS_KNIGHT, -2, 1);

blackKingsKnight() = blackKingsKnightUpLeft1() [] blackKingsKnightUpLeft2() [] blackKingsKnightUpRight1() [] blackKingsKnightUpRight2() []
                     blackKingsKnightDownLeft1() [] blackKingsKnightDownLeft2() [] blackKingsKnightDownRight1() [] blackKingsKnightDownRight2();
blackQueensKnight() = blackQueensKnightUpLeft1() [] blackQueensKnightUpLeft2() [] blackQueensKnightUpRight1() [] blackQueensKnightUpRight2() []
                      blackQueensKnightDownLeft1() [] blackQueensKnightDownLeft2() [] blackQueensKnightDownRight1() [] blackQueensKnightDownRight2();
blackKnights() = blackKingsKnight() [] blackQueensKnight();

whiteKingsKnightUpLeft1() = [currentTurn == WHITE_TURN]moveOnce(WHITE_KINGS_KNIGHT, 1, -2);
whiteKingsKnightUpLeft2() = [currentTurn == WHITE_TURN]moveOnce(WHITE_KINGS_KNIGHT, 2, -1);
whiteKingsKnightUpRight1() = [currentTurn == WHITE_TURN]moveOnce(WHITE_KINGS_KNIGHT, 1, 2);
whiteKingsKnightUpRight2() = [currentTurn == WHITE_TURN]moveOnce(WHITE_KINGS_KNIGHT, 2, 1);
whiteKingsKnightDownLeft1() = [currentTurn == WHITE_TURN]moveOnce(WHITE_KINGS_KNIGHT, -1, -2);
whiteKingsKnightDownLeft2() = [currentTurn == WHITE_TURN]moveOnce(WHITE_KINGS_KNIGHT, -2, -1);
whiteKingsKnightDownRight1() = [currentTurn == WHITE_TURN]moveOnce(WHITE_KINGS_KNIGHT, -1, 2);
whiteKingsKnightDownRight2() = [currentTurn == WHITE_TURN]moveOnce(WHITE_KINGS_KNIGHT, -2, 1);

whiteQueensKnightUpLeft1() = [currentTurn == WHITE_TURN]moveOnce(WHITE_QUEENS_KNIGHT, 1, -2);
whiteQueensKnightUpLeft2() = [currentTurn == WHITE_TURN]moveOnce(WHITE_QUEENS_KNIGHT, 2, -1);
whiteQueensKnightUpRight1() = [currentTurn == WHITE_TURN]moveOnce(WHITE_QUEENS_KNIGHT, 1, 2);
whiteQueensKnightUpRight2() = [currentTurn == WHITE_TURN]moveOnce(WHITE_QUEENS_KNIGHT, 2, 1);
whiteQueensKnightDownLeft1() = [currentTurn == WHITE_TURN]moveOnce(WHITE_QUEENS_KNIGHT, -1, -2);
whiteQueensKnightDownLeft2() = [currentTurn == WHITE_TURN]moveOnce(WHITE_QUEENS_KNIGHT, -2, -1);
whiteQueensKnightDownRight1() = [currentTurn == WHITE_TURN]moveOnce(WHITE_QUEENS_KNIGHT, -1, 2);
whiteQueensKnightDownRight2() = [currentTurn == WHITE_TURN]moveOnce(WHITE_QUEENS_KNIGHT, -2, 1);

whiteKingsKnight() = whiteKingsKnightUpLeft1() [] whiteKingsKnightUpLeft2() [] whiteKingsKnightUpRight1() [] whiteKingsKnightUpRight2() []
                     whiteKingsKnightDownLeft1() [] whiteKingsKnightDownLeft2() [] whiteKingsKnightDownRight1() [] whiteKingsKnightDownRight2();
whiteQueensKnight() = whiteQueensKnightUpLeft1() [] whiteQueensKnightUpLeft2() [] whiteQueensKnightUpRight1() [] whiteQueensKnightUpRight2() []
                      whiteQueensKnightDownLeft1() [] whiteQueensKnightDownLeft2() [] whiteQueensKnightDownRight1() [] whiteQueensKnightDownRight2();
whiteKnights() = whiteKingsKnight() [] whiteQueensKnight();

moveBlackKnights() = changeTurnToBlackKnight{currentTurn = BLACK_TURN} -> blackKnights();

#define goalSuccessBlackQueensKnightUpRight1 actualBoard[RANK_8][FILE_B] == BLACK_QUEENS_KNIGHT && 
											piecePosition[BLACK_QUEENS_KNIGHT][RANK] == RANK_8 && piecePosition[BLACK_QUEENS_KNIGHT][FILE] == FILE_B;
#define goalSuccessBlackQueensKnightDownRight1 actualBoard[RANK_4][FILE_B] == BLACK_QUEENS_KNIGHT && 
											piecePosition[BLACK_QUEENS_KNIGHT][RANK] == RANK_4 && piecePosition[BLACK_QUEENS_KNIGHT][FILE] == FILE_B;
#define goalSuccessBlackQueensKnightUpRight2 actualBoard[RANK_7][FILE_C] == BLACK_QUEENS_KNIGHT && 
											piecePosition[BLACK_QUEENS_KNIGHT][RANK] == RANK_7 && piecePosition[BLACK_QUEENS_KNIGHT][FILE] == FILE_C;
#define goalFailureBlackQueensKnightDownRight2SelfPiece actualBoard[RANK_5][FILE_C] == BLACK_QUEENS_KNIGHT &&
											piecePosition[BLACK_QUEENS_KNIGHT][RANK] == RANK_5 && piecePosition[BLACK_QUEENS_KNIGHT][FILE] == FILE_C;
#define goalFailureBlackQueensKnightMoveNotPossible1 actualBoard[RANK_4][FILE_C] == BLACK_QUEENS_KNIGHT &&
											piecePosition[BLACK_QUEENS_KNIGHT][RANK] == RANK_4 && piecePosition[BLACK_QUEENS_KNIGHT][FILE] == FILE_C;

#define goalSuccessWhiteKingsKnightUpRight2 actualBoard[RANK_8][FILE_H] == WHITE_KINGS_KNIGHT &&
    piecePosition[WHITE_KINGS_KNIGHT][RANK] == RANK_8 && piecePosition[WHITE_KINGS_KNIGHT][FILE] == FILE_H;
#define goalSuccessWhiteKingsKnightDownRight2 actualBoard[RANK_6][FILE_H] == WHITE_KINGS_KNIGHT &&
    piecePosition[WHITE_KINGS_KNIGHT][RANK] == RANK_6 && piecePosition[WHITE_KINGS_KNIGHT][FILE] == FILE_H;	
#define goalSuccessWhiteKingsKnightDownLeft1 actualBoard[RANK_5][FILE_E] == WHITE_KINGS_KNIGHT &&
    piecePosition[WHITE_KINGS_KNIGHT][RANK] == RANK_5 && piecePosition[WHITE_KINGS_KNIGHT][FILE] == FILE_E;
#define goalSuccessWhiteKingsKnightUpLeft2 actualBoard[RANK_8][FILE_D] == WHITE_KINGS_KNIGHT &&
    piecePosition[WHITE_KINGS_KNIGHT][RANK] == RANK_8 && piecePosition[WHITE_KINGS_KNIGHT][FILE] == FILE_D;
#define goalSuccessWhiteKingsKnightDownRight2EnemyPiece actualBoard[RANK_5][FILE_G] == WHITE_KINGS_KNIGHT &&
    piecePosition[WHITE_KINGS_KNIGHT][RANK] == RANK_5 && piecePosition[WHITE_KINGS_KNIGHT][FILE] == FILE_G;
#define goalFailureWhiteKingsKnightDownLeft2SelfPiece actualBoard[RANK_6][FILE_D] == WHITE_KINGS_KNIGHT &&
    piecePosition[WHITE_KINGS_KNIGHT][RANK] == RANK_6 && piecePosition[WHITE_KINGS_KNIGHT][FILE] == FILE_D;


#assert moveBlackKnights() reaches goalSuccessBlackQueensKnightUpRight1;
#assert moveBlackKnights() reaches goalSuccessBlackQueensKnightDownRight1;
#assert moveBlackKnights() reaches goalSuccessBlackQueensKnightUpRight2;
#assert moveBlackKnights() reaches goalFailureBlackQueensKnightDownRight2SelfPiece;
#assert moveBlackKnights() reaches goalFailureBlackQueensKnightMoveNotPossible1;

#assert whiteKnights() reaches goalSuccessWhiteKingsKnightUpRight2;
#assert whiteKnights() reaches goalSuccessWhiteKingsKnightDownRight2;
#assert whiteKnights() reaches goalSuccessWhiteKingsKnightDownLeft1;
#assert whiteKnights() reaches goalSuccessWhiteKingsKnightUpLeft2;
#assert whiteKnights() reaches goalSuccessWhiteKingsKnightDownRight2EnemyPiece;
#assert whiteKnights() reaches goalFailureWhiteKingsKnightDownLeft2SelfPiece;
