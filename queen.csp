#include "board.csp";

blackQueenUp() = [currentTurn == BLACK_TURN]moveContinuous(BLACK_QUEEN, 1, 0);
blackQueenDown() = [currentTurn == BLACK_TURN]moveContinuous(BLACK_QUEEN, -1, 0);
blackQueenLeft() = [currentTurn == BLACK_TURN]moveContinuous(BLACK_QUEEN, 0, -1);
blackQueenRight() = [currentTurn == BLACK_TURN]moveContinuous(BLACK_QUEEN, 0, 1);
blackQueenUpLeft() = [currentTurn == BLACK_TURN]moveContinuous(BLACK_QUEEN, 1, -1);
blackQueenUpRight() = [currentTurn == BLACK_TURN]moveContinuous(BLACK_QUEEN, 1, 1);
blackQueenDownLeft() = [currentTurn == BLACK_TURN]moveContinuous(BLACK_QUEEN, -1, -1);
blackQueenDownRight() = [currentTurn == BLACK_TURN]moveContinuous(BLACK_QUEEN, -1, 1);

blackQueen() = blackQueenUp() [] blackQueenDown() [] blackQueenLeft() [] blackQueenRight() [] 
               blackQueenUpLeft() [] blackQueenUpRight() [] blackQueenDownLeft() [] blackQueenDownRight();

whiteQueenUp() = [currentTurn == WHITE_TURN]moveContinuous(WHITE_QUEEN, 1, 0);
whiteQueenDown() = [currentTurn == WHITE_TURN]moveContinuous(WHITE_QUEEN, -1, 0);
whiteQueenLeft() = [currentTurn == WHITE_TURN]moveContinuous(WHITE_QUEEN, 0, -1);
whiteQueenRight() = [currentTurn == WHITE_TURN]moveContinuous(WHITE_QUEEN, 0, 1);
whiteQueenUpLeft() = [currentTurn == WHITE_TURN]moveContinuous(WHITE_QUEEN, 1, -1);
whiteQueenUpRight() = [currentTurn == WHITE_TURN]moveContinuous(WHITE_QUEEN, 1, 1);
whiteQueenDownLeft() = [currentTurn == WHITE_TURN]moveContinuous(WHITE_QUEEN, -1, -1);
whiteQueenDownRight() = [currentTurn == WHITE_TURN]moveContinuous(WHITE_QUEEN, -1, 1);

whiteQueen() = whiteQueenUp() [] whiteQueenDown() [] whiteQueenLeft() [] whiteQueenRight() [] 
               whiteQueenUpLeft() [] whiteQueenUpRight() [] whiteQueenDownLeft() [] whiteQueenDownRight();

moveBlackQueen() = changeTurnToBlackQueen{currentTurn = BLACK_TURN} -> blackQueen();

#define goalWhiteQueenDownLeft actualBoard[RANK_1][FILE_B] == WHITE_QUEEN && 
								piecePosition[WHITE_QUEEN][RANK] == RANK_1 && piecePosition[WHITE_QUEEN][FILE] == FILE_B;
#define goalWhiteQueenRight actualBoard[RANK_4][FILE_G] == WHITE_QUEEN && 
								piecePosition[WHITE_QUEEN][RANK] == RANK_4 && piecePosition[WHITE_QUEEN][FILE] == FILE_G;
#define goalWhiteQueenUpRight actualBoard[RANK_5][FILE_F] == WHITE_QUEEN && 
								piecePosition[WHITE_QUEEN][RANK] == RANK_5 && piecePosition[WHITE_QUEEN][FILE] == FILE_F;
#define goalWhiteQueenEatUpLeft actualBoard[RANK_6][FILE_C] == WHITE_QUEEN && 
								piecePosition[WHITE_QUEEN][RANK] == RANK_6 && piecePosition[WHITE_QUEEN][FILE] == FILE_C;
#define goalWhiteQueenDoubleBlack actualBoard[RANK_8][FILE_E] == WHITE_QUEEN && 
								piecePosition[WHITE_QUEEN][RANK] == RANK_8 && piecePosition[WHITE_QUEEN][FILE] == FILE_E;
#define goalWhiteQueenEatDownRight actualBoard[RANK_1][FILE_H] == WHITE_QUEEN && 
								piecePosition[WHITE_QUEEN][RANK] == RANK_1 && piecePosition[WHITE_QUEEN][FILE] == FILE_H;
#define goalWhiteQueenOccupiedDown actualBoard[RANK_1][FILE_E] == WHITE_QUEEN && 
								piecePosition[WHITE_QUEEN][RANK] == RANK_1 && piecePosition[WHITE_QUEEN][FILE] == FILE_E;

#define goalBlackQueenEatDown actualBoard[RANK_6][FILE_D] == BLACK_QUEEN && 
								piecePosition[BLACK_QUEEN][RANK] == RANK_6 && piecePosition[BLACK_QUEEN][FILE] == FILE_D;
#define goalBlackQueenLeft actualBoard[RANK_7][FILE_B] == BLACK_QUEEN && 
								piecePosition[BLACK_QUEEN][RANK] == RANK_7 && piecePosition[BLACK_QUEEN][FILE] == FILE_B;
#define goalBlackQueenUp actualBoard[RANK_8][FILE_D] == BLACK_QUEEN && 
								piecePosition[BLACK_QUEEN][RANK] == RANK_8 && piecePosition[BLACK_QUEEN][FILE] == FILE_D;
#define goalBlackQueenDownRight actualBoard[RANK_3][FILE_H] == BLACK_QUEEN && 
								piecePosition[BLACK_QUEEN][RANK] == RANK_3 && piecePosition[BLACK_QUEEN][FILE] == FILE_H;
#define goalBlackQueenOccupiedUpRight actualBoard[RANK_8][FILE_E] == BLACK_QUEEN && 
								piecePosition[BLACK_QUEEN][RANK] == RANK_8 && piecePosition[BLACK_QUEEN][FILE] == FILE_E;
#define goalBlackQueenBlockedRight actualBoard[RANK_7][FILE_H] == BLACK_QUEEN && 
								piecePosition[BLACK_QUEEN][RANK] == RANK_7 && piecePosition[BLACK_QUEEN][FILE] == FILE_H;
#define goalBlackQueenBlockedDownLeft actualBoard[RANK_4][FILE_A] == BLACK_QUEEN && 
								piecePosition[BLACK_QUEEN][RANK] == RANK_4 && piecePosition[BLACK_QUEEN][FILE] == FILE_A;

#assert whiteQueen() reaches goalWhiteQueenDownLeft;
#assert whiteQueen() reaches goalWhiteQueenRight;
#assert whiteQueen() reaches goalWhiteQueenUpRight;
#assert whiteQueen() reaches goalWhiteQueenEatUpLeft;
#assert whiteQueen() reaches goalWhiteQueenEatDownRight;
#assert whiteQueen() reaches goalWhiteQueenOccupiedDown;
#assert whiteQueen() reaches goalWhiteQueenDoubleBlack;

#assert moveBlackQueen() reaches goalBlackQueenLeft;
#assert moveBlackQueen() reaches goalBlackQueenUp;
#assert moveBlackQueen() reaches goalBlackQueenDownRight;
#assert moveBlackQueen() reaches goalBlackQueenOccupiedUpRight;
#assert moveBlackQueen() reaches goalBlackQueenBlockedRight;
#assert moveBlackQueen() reaches goalBlackQueenBlockedDownLeft;
#assert moveBlackQueen() reaches goalBlackQueenEatDown;
