#include "board.csp";

whiteRook() = whiteRookUp() [] whiteRookDown() [] whiteRookLeft() [] whiteRookRight();

whiteRookUp() = whiteQueensRookUp() [] whiteKingsRookUp();
whiteRookDown() = whiteQueensRookDown() [] whiteKingsRookDown();
whiteRookLeft() = whiteQueensRookLeft() [] whiteKingsRookLeft();
whiteRookRight() = whiteQueensRookRight() [] whiteKingsRookRight();

whiteQueensRookUp() = [currentTurn == WHITE_TURN]moveContinuous(WHITE_QUEENS_ROOK, 1, 0);
whiteQueensRookDown() = [currentTurn == WHITE_TURN]moveContinuous(WHITE_QUEENS_ROOK, -1, 0);
whiteQueensRookLeft() = [currentTurn == WHITE_TURN]moveContinuous(WHITE_QUEENS_ROOK, 0, -1);
whiteQueensRookRight() = [currentTurn == WHITE_TURN]moveContinuous(WHITE_QUEENS_ROOK, 0, 1);

whiteKingsRookUp() = [currentTurn == WHITE_TURN]moveContinuous(WHITE_KINGS_ROOK, 1, 0);
whiteKingsRookDown() = [currentTurn == WHITE_TURN]moveContinuous(WHITE_KINGS_ROOK, -1, 0);
whiteKingsRookLeft() = [currentTurn == WHITE_TURN]moveContinuous(WHITE_KINGS_ROOK, 0, -1);
whiteKingsRookRight() = [currentTurn == WHITE_TURN]moveContinuous(WHITE_KINGS_ROOK, 0, 1);					 

blackRook() = blackRookUp() [] blackRookDown() [] blackRookLeft() [] blackRookRight();

blackRookUp() = blackQueensRookUp() [] blackKingsRookUp();
blackRookDown() = blackQueensRookDown() [] blackKingsRookDown();
blackRookLeft() = blackQueensRookLeft() [] blackKingsRookLeft();
blackRookRight() = blackQueensRookRight() [] blackKingsRookRight();

blackQueensRookUp() = [currentTurn == BLACK_TURN]moveContinuous(BLACK_QUEENS_ROOK, 1, 0);
blackQueensRookDown() = [currentTurn == BLACK_TURN]moveContinuous(BLACK_QUEENS_ROOK, -1, 0);
blackQueensRookLeft() = [currentTurn == BLACK_TURN]moveContinuous(BLACK_QUEENS_ROOK, 0, -1);
blackQueensRookRight() = [currentTurn == BLACK_TURN]moveContinuous(BLACK_QUEENS_ROOK, 0, 1);

blackKingsRookUp() = [currentTurn == BLACK_TURN]moveContinuous(BLACK_KINGS_ROOK, 1, 0);
blackKingsRookDown() = [currentTurn == BLACK_TURN]moveContinuous(BLACK_KINGS_ROOK, -1, 0);
blackKingsRookLeft() = [currentTurn == BLACK_TURN]moveContinuous(BLACK_KINGS_ROOK, 0, -1);
blackKingsRookRight() = [currentTurn == BLACK_TURN]moveContinuous(BLACK_KINGS_ROOK, 0, 1);	

moveBlackRook() = changeTurnToBlackRook{currentTurn = BLACK_TURN;} -> blackRook();

#define goalSuccessBlackQueensRookDownEnemyPiece actualBoard[RANK_2][FILE_A] == BLACK_QUEENS_ROOK && 
										piecePosition[BLACK_QUEENS_ROOK][RANK] == RANK_2 && piecePosition[BLACK_QUEENS_ROOK][FILE] == FILE_A;
#define goalSuccessBlackQueensRookRight actualBoard[RANK_5][FILE_B] == BLACK_QUEENS_ROOK && 
										piecePosition[BLACK_QUEENS_ROOK][RANK] == RANK_5 && piecePosition[BLACK_QUEENS_ROOK][FILE] == FILE_B;
#define goalSuccessBlackKingsRookUp actualBoard[RANK_8][FILE_H] == BLACK_KINGS_ROOK && 
										piecePosition[BLACK_KINGS_ROOK][RANK] == RANK_8 && piecePosition[BLACK_KINGS_ROOK][FILE] == FILE_H;
#define goalSuccessBlackKingsRookLeftEnemyPiece actualBoard[RANK_1][FILE_F] == BLACK_KINGS_ROOK && 
										piecePosition[BLACK_KINGS_ROOK][RANK] == RANK_1 && piecePosition[BLACK_KINGS_ROOK][FILE] == FILE_F;
#define goalFailureBlackQueensRookUpSelfPiece actualBoard[RANK_6][FILE_A] == BLACK_QUEENS_ROOK &&
										piecePosition[BLACK_QUEENS_ROOK][RANK] == RANK_6 && piecePosition[BLACK_QUEENS_ROOK][FILE] == FILE_A;
#define goalFailureBlackQueensRookRightSelfPiece actualBoard[RANK_5][FILE_C] == BLACK_QUEENS_ROOK &&
										piecePosition[BLACK_QUEENS_ROOK][RANK] == RANK_5 && piecePosition[BLACK_QUEENS_ROOK][FILE] == FILE_C;
#define goalFailureBlackQueensRookMoveNotPossible1 actualBoard[RANK_4][FILE_B] == BLACK_QUEENS_ROOK &&
										piecePosition[BLACK_QUEENS_ROOK][RANK] == RANK_4 && piecePosition[BLACK_QUEENS_ROOK][FILE] == FILE_B;
#define goalFailureBlackQueensRookBehindSelfPiece actualBoard[RANK_8][FILE_A] == BLACK_QUEENS_ROOK &&
										piecePosition[BLACK_QUEENS_ROOK][RANK] == RANK_8 && piecePosition[BLACK_QUEENS_ROOK][FILE] == FILE_A;
#define goalFailureBlackKingsRookLeftBehindEnemyPiece actualBoard[RANK_1][FILE_E] == BLACK_KINGS_ROOK &&
										piecePosition[BLACK_KINGS_ROOK][RANK] == RANK_1 && piecePosition[BLACK_KINGS_ROOK][FILE] == FILE_E;

#assert moveBlackRook() reaches goalSuccessBlackQueensRookDownEnemyPiece;
#assert moveBlackRook() reaches goalSuccessBlackQueensRookRight;
#assert moveBlackRook() reaches goalSuccessBlackKingsRookUp;
#assert moveBlackRook() reaches goalSuccessBlackKingsRookLeftEnemyPiece;
#assert moveBlackRook() reaches goalFailureBlackQueensRookUpSelfPiece;
#assert moveBlackRook() reaches goalFailureBlackQueensRookRightSelfPiece;
#assert moveBlackRook() reaches goalFailureBlackQueensRookMoveNotPossible1;
#assert moveBlackRook() reaches goalFailureBlackQueensRookBehindSelfPiece;
#assert moveBlackRook() reaches goalFailureBlackKingsRookLeftBehindEnemyPiece;

#define goalSuccessWhiteQueensRookUpEnemyPiece actualBoard[RANK_5][FILE_A] == WHITE_QUEENS_ROOK && 
										piecePosition[WHITE_QUEENS_ROOK][RANK] == RANK_5 && piecePosition[WHITE_QUEENS_ROOK][FILE] == FILE_A;
#define goalSuccessWhiteQueensRookRight actualBoard[RANK_2][FILE_H] == WHITE_QUEENS_ROOK && 
										piecePosition[WHITE_QUEENS_ROOK][RANK] == RANK_2 && piecePosition[WHITE_QUEENS_ROOK][FILE] == FILE_H;
#define goalSuccessWhiteKingsRookDown actualBoard[RANK_1][FILE_A] == WHITE_QUEENS_ROOK && 
										piecePosition[WHITE_QUEENS_ROOK][RANK] == RANK_1 && piecePosition[WHITE_QUEENS_ROOK][FILE] == FILE_A;
#define goalFailureWhiteQueensRookMoveNotPossible1 actualBoard[RANK_1][FILE_B] == WHITE_QUEENS_ROOK;
#define goalFailureWhiteQueensRookUpBehindEnemyPiece actualBoard[RANK_6][FILE_A] == WHITE_QUEENS_ROOK;
	
#assert whiteRook() reaches goalSuccessWhiteQueensRookUpEnemyPiece;
#assert whiteRook() reaches goalSuccessWhiteQueensRookRight;
#assert whiteRook() reaches goalSuccessWhiteKingsRookDown;
#assert whiteRook() reaches goalFailureWhiteQueensRookUpBehindEnemyPiece;
