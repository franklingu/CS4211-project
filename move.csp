#include "constants.csp";

movePiece(piece, up, right) = 
// if space is empty
[actualBoard[piecePosition[piece][RANK] + up][piecePosition[piece][FILE] + right] == 0]
	move.pieceNames[piece].files[(piecePosition[piece][FILE] + right)].(piecePosition[piece][RANK] + up + 1){
		// update the old position
		actualBoard[piecePosition[piece][RANK]][piecePosition[piece][FILE]] = 0;
		// update new position
		piecePosition[piece][RANK] = piecePosition[piece][RANK] + up;
		piecePosition[piece][FILE] = piecePosition[piece][FILE] + right;
		actualBoard[piecePosition[piece][RANK]][piecePosition[piece][FILE]] = piece;
		// current player no longer in check if move was legal
		checkStatus[currentTurn] = 0;
		// change turn
		currentTurn = 1 - currentTurn;	
		// increase numMoves
		numMoves = 1 + numMoves;
	} -> (([currentTurn == 1] blackInCheck()) [] ([currentTurn == 0] whiteInCheck()))
[]
[actualBoard[piecePosition[piece][RANK] + up][piecePosition[piece][FILE] + right] != 0]
	eat.pieceNames[piece].files[(piecePosition[piece][FILE] + right)].(piecePosition[piece][RANK] + up + 1){
		// kill the enemy piece!!!
		piecePosition[actualBoard[piecePosition[piece][RANK] + up][piecePosition[piece][FILE] + right]][RANK] = DEAD;
		piecePosition[actualBoard[piecePosition[piece][RANK] + up][piecePosition[piece][FILE] + right]][FILE] = DEAD;
		// updating previous position to empty
		actualBoard[piecePosition[piece][RANK]][piecePosition[piece][FILE]] = 0;
		piecePosition[piece][RANK] = piecePosition[piece][RANK] + up;
		piecePosition[piece][FILE] = piecePosition[piece][FILE] + right;
		actualBoard[piecePosition[piece][RANK]][piecePosition[piece][FILE]] = piece;
		// current player no longer in check if move was legal
		checkStatus[currentTurn] = 0;
		// change turn
		currentTurn = 1 - currentTurn;	
		// increase numMoves
		numMoves = 1 + numMoves;
	} -> (([currentTurn == 1] blackInCheck()) [] ([currentTurn == 0] whiteInCheck()));