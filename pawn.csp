#include "board.csp";

whitePawn() = whitePawnStraight() [] whitePawnDouble() [] whitePawnUpLeft() [] whitePawnUpRight();

whitePawnStraight() = whiteOnePawnStraight() [] whiteTwoPawnStraight() [] whiteThreePawnStraight() [] whiteFourPawnStraight() [] whiteFivePawnStraight() [] whiteSixPawnStraight() [] whiteSevenPawnStraight() [] whiteEightPawnStraight();
whitePawnDouble() = whiteOnePawnDouble() [] whiteTwoPawnDouble() [] whiteThreePawnDouble() [] whiteFourPawnDouble() [] whiteFivePawnDouble() [] whiteSixPawnDouble() [] whiteSevenPawnDouble() [] whiteEightPawnDouble();
whitePawnUpLeft() = whiteOnePawnUpLeft() [] whiteTwoPawnUpLeft() [] whiteThreePawnUpLeft() [] whiteFourPawnUpLeft() [] whiteFivePawnUpLeft() [] whiteSixPawnUpLeft() [] whiteSevenPawnUpLeft() [] whiteEightPawnUpLeft();
whitePawnUpRight() = whiteOnePawnUpRight() [] whiteTwoPawnUpRight() [] whiteThreePawnUpRight() [] whiteFourPawnUpRight() [] whiteFivePawnUpRight() [] whiteSixPawnUpRight() [] whiteSevenPawnUpRight() [] whiteEightPawnUpRight();

whiteOnePawnStraight() = [currentTurn == WHITE_TURN]movePawnOnce(WHITE_PAWN_1, 1);
whiteTwoPawnStraight() = [currentTurn == WHITE_TURN]movePawnOnce(WHITE_PAWN_2, 1);
whiteThreePawnStraight() = [currentTurn == WHITE_TURN]movePawnOnce(WHITE_PAWN_3, 1);
whiteFourPawnStraight() = [currentTurn == WHITE_TURN]movePawnOnce(WHITE_PAWN_4, 1);
whiteFivePawnStraight() = [currentTurn == WHITE_TURN]movePawnOnce(WHITE_PAWN_5, 1);
whiteSixPawnStraight() = [currentTurn == WHITE_TURN]movePawnOnce(WHITE_PAWN_6, 1);
whiteSevenPawnStraight() = [currentTurn == WHITE_TURN]movePawnOnce(WHITE_PAWN_7, 1);
whiteEightPawnStraight() = [currentTurn == WHITE_TURN]movePawnOnce(WHITE_PAWN_8, 1);

whiteOnePawnDouble() = [currentTurn == WHITE_TURN]movePawnDouble(WHITE_PAWN_1, 1);
whiteTwoPawnDouble() = [currentTurn == WHITE_TURN]movePawnDouble(WHITE_PAWN_2, 1);
whiteThreePawnDouble() = [currentTurn == WHITE_TURN]movePawnDouble(WHITE_PAWN_3, 1);
whiteFourPawnDouble() = [currentTurn == WHITE_TURN]movePawnDouble(WHITE_PAWN_4, 1);
whiteFivePawnDouble() = [currentTurn == WHITE_TURN]movePawnDouble(WHITE_PAWN_5, 1);
whiteSixPawnDouble() = [currentTurn == WHITE_TURN]movePawnDouble(WHITE_PAWN_6, 1);
whiteSevenPawnDouble() = [currentTurn == WHITE_TURN]movePawnDouble(WHITE_PAWN_7, 1);
whiteEightPawnDouble() = [currentTurn == WHITE_TURN]movePawnDouble(WHITE_PAWN_8, 1);

whiteOnePawnUpLeft() = [currentTurn == WHITE_TURN]movePawnDiagonal(WHITE_PAWN_1, 1, -1);
whiteTwoPawnUpLeft() = [currentTurn == WHITE_TURN]movePawnDiagonal(WHITE_PAWN_2, 1, -1);
whiteThreePawnUpLeft() = [currentTurn == WHITE_TURN]movePawnDiagonal(WHITE_PAWN_3, 1, -1);
whiteFourPawnUpLeft() = [currentTurn == WHITE_TURN]movePawnDiagonal(WHITE_PAWN_4, 1, -1);
whiteFivePawnUpLeft() = [currentTurn == WHITE_TURN]movePawnDiagonal(WHITE_PAWN_5, 1, -1);
whiteSixPawnUpLeft() = [currentTurn == WHITE_TURN]movePawnDiagonal(WHITE_PAWN_6, 1, -1);
whiteSevenPawnUpLeft() = [currentTurn == WHITE_TURN]movePawnDiagonal(WHITE_PAWN_7, 1, -1);
whiteEightPawnUpLeft() = [currentTurn == WHITE_TURN]movePawnDiagonal(WHITE_PAWN_8, 1, -1);

whiteOnePawnUpRight() = [currentTurn == WHITE_TURN]movePawnDiagonal(WHITE_PAWN_1, 1, 1);
whiteTwoPawnUpRight() = [currentTurn == WHITE_TURN]movePawnDiagonal(WHITE_PAWN_2, 1, 1);
whiteThreePawnUpRight() = [currentTurn == WHITE_TURN]movePawnDiagonal(WHITE_PAWN_3, 1, 1);
whiteFourPawnUpRight() = [currentTurn == WHITE_TURN]movePawnDiagonal(WHITE_PAWN_4, 1, 1);
whiteFivePawnUpRight() = [currentTurn == WHITE_TURN]movePawnDiagonal(WHITE_PAWN_5, 1, 1);
whiteSixPawnUpRight() = [currentTurn == WHITE_TURN]movePawnDiagonal(WHITE_PAWN_6, 1, 1);
whiteSevenPawnUpRight() = [currentTurn == WHITE_TURN]movePawnDiagonal(WHITE_PAWN_7, 1, 1);
whiteEightPawnUpRight() = [currentTurn == WHITE_TURN]movePawnDiagonal(WHITE_PAWN_8, 1, 1);



blackPawn() = blackPawnStraight() [] blackPawnDouble() [] blackPawnDownLeft() [] blackPawnDownRight();

blackPawnStraight() = blackOnePawnStraight() [] blackTwoPawnStraight() [] blackThreePawnStraight() [] blackFourPawnStraight() [] blackFivePawnStraight() [] blackSixPawnStraight() [] blackSevenPawnStraight() [] blackEightPawnStraight();
blackPawnDouble() = blackOnePawnDouble() [] blackTwoPawnDouble() [] blackThreePawnDouble() [] blackFourPawnDouble() [] blackFivePawnDouble() [] blackSixPawnDouble() [] blackSevenPawnDouble() [] blackEightPawnDouble();
blackPawnDownLeft() = blackOnePawnDownLeft() [] blackTwoPawnDownLeft() [] blackThreePawnDownLeft() [] blackFourPawnDownLeft() [] blackFivePawnDownLeft() [] blackSixPawnDownLeft() [] blackSevenPawnDownLeft() [] blackEightPawnDownLeft();
blackPawnDownRight() = blackOnePawnDownRight() [] blackTwoPawnDownRight() [] blackThreePawnDownRight() [] blackFourPawnDownRight() [] blackFivePawnDownRight() [] blackSixPawnDownRight() [] blackSevenPawnDownRight() [] blackEightPawnDownRight();

blackOnePawnStraight() = [currentTurn == BLACK_TURN]movePawnOnce(BLACK_PAWN_1, -1);
blackTwoPawnStraight() = [currentTurn == BLACK_TURN]movePawnOnce(BLACK_PAWN_2, -1);
blackThreePawnStraight() = [currentTurn == BLACK_TURN]movePawnOnce(BLACK_PAWN_3, -1);
blackFourPawnStraight() = [currentTurn == BLACK_TURN]movePawnOnce(BLACK_PAWN_4, -1);
blackFivePawnStraight() = [currentTurn == BLACK_TURN]movePawnOnce(BLACK_PAWN_5, -1);
blackSixPawnStraight() = [currentTurn == BLACK_TURN]movePawnOnce(BLACK_PAWN_6, -1);
blackSevenPawnStraight() = [currentTurn == BLACK_TURN]movePawnOnce(BLACK_PAWN_7, -1);
blackEightPawnStraight() = [currentTurn == BLACK_TURN]movePawnOnce(BLACK_PAWN_8, -1);

blackOnePawnDouble() = [currentTurn == BLACK_TURN]movePawnDouble(BLACK_PAWN_1, -1);
blackTwoPawnDouble() = [currentTurn == BLACK_TURN]movePawnDouble(BLACK_PAWN_2, -1);
blackThreePawnDouble() = [currentTurn == BLACK_TURN]movePawnDouble(BLACK_PAWN_3, -1);
blackFourPawnDouble() = [currentTurn == BLACK_TURN]movePawnDouble(BLACK_PAWN_4, -1);
blackFivePawnDouble() = [currentTurn == BLACK_TURN]movePawnDouble(BLACK_PAWN_5, -1);
blackSixPawnDouble() = [currentTurn == BLACK_TURN]movePawnDouble(BLACK_PAWN_6, -1);
blackSevenPawnDouble() = [currentTurn == BLACK_TURN]movePawnDouble(BLACK_PAWN_7, -1);
blackEightPawnDouble() = [currentTurn == BLACK_TURN]movePawnDouble(BLACK_PAWN_8, -1);

blackOnePawnDownLeft() = [currentTurn == BLACK_TURN]movePawnDiagonal(BLACK_PAWN_1, -1, -1);
blackTwoPawnDownLeft() = [currentTurn == BLACK_TURN]movePawnDiagonal(BLACK_PAWN_2, -1, -1);
blackThreePawnDownLeft() = [currentTurn == BLACK_TURN]movePawnDiagonal(BLACK_PAWN_3, -1, -1);
blackFourPawnDownLeft() = [currentTurn == BLACK_TURN]movePawnDiagonal(BLACK_PAWN_4, -1, -1);
blackFivePawnDownLeft() = [currentTurn == BLACK_TURN]movePawnDiagonal(BLACK_PAWN_5, -1, -1);
blackSixPawnDownLeft() = [currentTurn == BLACK_TURN]movePawnDiagonal(BLACK_PAWN_6, -1, -1);
blackSevenPawnDownLeft() = [currentTurn == BLACK_TURN]movePawnDiagonal(BLACK_PAWN_7, -1, -1);
blackEightPawnDownLeft() = [currentTurn == BLACK_TURN]movePawnDiagonal(BLACK_PAWN_8, -1, -1);

blackOnePawnDownRight() = [currentTurn == BLACK_TURN]movePawnDiagonal(BLACK_PAWN_1, -1, 1);
blackTwoPawnDownRight() = [currentTurn == BLACK_TURN]movePawnDiagonal(BLACK_PAWN_2, -1, 1);
blackThreePawnDownRight() = [currentTurn == BLACK_TURN]movePawnDiagonal(BLACK_PAWN_3, -1, 1);
blackFourPawnDownRight() = [currentTurn == BLACK_TURN]movePawnDiagonal(BLACK_PAWN_4, -1, 1);
blackFivePawnDownRight() = [currentTurn == BLACK_TURN]movePawnDiagonal(BLACK_PAWN_5, -1, 1);
blackSixPawnDownRight() = [currentTurn == BLACK_TURN]movePawnDiagonal(BLACK_PAWN_6, -1, 1);
blackSevenPawnDownRight() = [currentTurn == BLACK_TURN]movePawnDiagonal(BLACK_PAWN_7, -1, 1);
blackEightPawnDownRight() = [currentTurn == BLACK_TURN]movePawnDiagonal(BLACK_PAWN_8, -1, 1);

movePawnOnce(piece, up) = if (piecePosition[piece][RANK] != DEAD && piecePosition[piece][FILE] != DEAD )
{
	// movement is within board, taking advantage of pawns are never on the final row of either side
	if ( piecePosition[piece][RANK] + up >= 0 && piecePosition[piece][RANK] + up <= BOARD_SIZE - 1)
		{
			// if space is empty
			if(actualBoard[piecePosition[piece][RANK] + up][piecePosition[piece][FILE]] == 0)
			{
				move{
					// update the old position
					actualBoard[piecePosition[piece][RANK]][piecePosition[piece][FILE]] = 0;
					// update new position
					piecePosition[piece][RANK] = piecePosition[piece][RANK] + up;
					actualBoard[piecePosition[piece][RANK]][piecePosition[piece][FILE]] = piece;
					} -> validateWhite()
			}
		}
};

movePawnDiagonal(piece, up, right) = if (piecePosition[piece][RANK] != DEAD && piecePosition[piece][FILE] != DEAD)
{
	if ( piecePosition[piece][RANK] + up >= 0 && piecePosition[piece][RANK] + up <= BOARD_SIZE - 1 &&
		piecePosition[piece][FILE] + right >= 0 && piecePosition[piece][FILE] + right <= BOARD_SIZE - 1 )
	{
	  if(piece <= WHITE_PAWN_8)
	  {
			if (actualBoard[piecePosition[piece][RANK] + up][piecePosition[piece][FILE] + right] >= BLACK_PAWN_1)                    //if target is occupied by black pieces then white pawns can kill it
			{
				eat{
					actualBoard[piecePosition[piece][RANK]][piecePosition[piece][FILE]] = 0;
					piecePosition[piece][RANK] = piecePosition[piece][RANK] + up;
					piecePosition[piece][FILE] = piecePosition[piece][FILE] + right;
					actualBoard[piecePosition[piece][RANK]][piecePosition[piece][FILE]] = piece;
				} -> validateWhite()
			}
			else { Stop }
	  }
	  else if(piece >= BLACK_PAWN_1)
	  {
	        if (actualBoard[piecePosition[piece][RANK] + up][piecePosition[piece][FILE] + right] > 0 && actualBoard[piecePosition[piece][RANK] + up][piecePosition[piece][FILE] + right] <= WHITE_KINGS_ROOK)                //if target is occupied by white pieces then black pawns can kill it
			{
				eat{
					actualBoard[piecePosition[piece][RANK]][piecePosition[piece][FILE]] = 0;
					piecePosition[piece][RANK] = piecePosition[piece][RANK] + up;
					piecePosition[piece][FILE] = piecePosition[piece][FILE] + right;
					actualBoard[piecePosition[piece][RANK]][piecePosition[piece][FILE]] = piece;
				} -> validateBlack()
			}
			else { Stop }
	  }
	}
	else { Stop }
};

movePawnDouble(piece, up) = if (piecePosition[piece][RANK] != DEAD && piecePosition[piece][FILE] != DEAD)
{
   if(piece <= WHITE_PAWN_8)
   {	
		if (piecePosition[piece][RANK] == RANK_2 && actualBoard[piecePosition[piece][RANK] + up][piecePosition[piece][FILE]] == 0 &&
			actualBoard[piecePosition[piece][RANK] + up + up][piecePosition[piece][FILE]] == 0)       //RANK_2 is the initial rank for the white pawns
		{
			move{
					// update the old position
					actualBoard[piecePosition[piece][RANK]][piecePosition[piece][FILE]] = 0;
					// update new position
					piecePosition[piece][RANK] = piecePosition[piece][RANK] + up + up;
					actualBoard[piecePosition[piece][RANK]][piecePosition[piece][FILE]] = piece;
			} -> validateWhite()
		}
		else { Stop }
	}
	else if(piece >= BLACK_PAWN_1)
	{
	    if (piecePosition[piece][RANK] == RANK_7 && actualBoard[piecePosition[piece][RANK] + up][piecePosition[piece][FILE]] == 0 &&
			actualBoard[piecePosition[piece][RANK] + up + up][piecePosition[piece][FILE]] == 0)       //RANK_7 is the initial rank for the black pawns
		{
			move{
					// update the old position
					actualBoard[piecePosition[piece][RANK]][piecePosition[piece][FILE]] = 0;
					// update new position
					piecePosition[piece][RANK] = piecePosition[piece][RANK] + up + up;
					actualBoard[piecePosition[piece][RANK]][piecePosition[piece][FILE]] = piece;
			} -> validateBlack()
		}
		else { Stop }
	}
};


#define goal_pawn_move_single actualBoard[RANK_6][FILE_E] == BLACK_PAWN_5 && 
	piecePosition[BLACK_PAWN_5][RANK] == RANK_6 && piecePosition[BLACK_PAWN_5][FILE] == FILE_E;
	
#define goal_pawn_move_double actualBoard[RANK_5][FILE_E] == BLACK_PAWN_5 && 
	piecePosition[BLACK_PAWN_5][RANK] == RANK_5 && piecePosition[BLACK_PAWN_5][FILE] == FILE_E;	
	
#define goal_pawn_move_single_fail actualBoard[RANK_6][FILE_A] == BLACK_PAWN_1 && 
	piecePosition[BLACK_PAWN_1][RANK] == RANK_6 && piecePosition[BLACK_PAWN_1][FILE] == FILE_A;		
	
#define goal_pawn_move_double_fail actualBoard[RANK_5][FILE_A] == BLACK_PAWN_1 && 
	piecePosition[BLACK_PAWN_1][RANK] == RANK_5 && piecePosition[BLACK_PAWN_1][FILE] == FILE_A;

#define goal_pawn_move_double_fail_2 actualBoard[RANK_4][FILE_C] == BLACK_PAWN_3 && 
	piecePosition[BLACK_PAWN_3][RANK] == RANK_4 && piecePosition[BLACK_PAWN_3][FILE] == FILE_C;			
	
#define goal_pawn_eat_diagonal_left actualBoard[RANK_6][FILE_D] == BLACK_PAWN_5 && 
	piecePosition[BLACK_PAWN_5][RANK] == RANK_6 && piecePosition[BLACK_PAWN_5][FILE] == FILE_D;
	
#define goal_pawn_eat_diagonal_right actualBoard[RANK_6][FILE_F] == BLACK_PAWN_5 && 
	piecePosition[BLACK_PAWN_5][RANK] == RANK_6 && piecePosition[BLACK_PAWN_5][FILE] == FILE_F;	
	
#define goal_pawn_move_triple actualBoard[RANK_4][FILE_E] == BLACK_PAWN_5 && 
	piecePosition[BLACK_PAWN_5][RANK] == RANK_4 && piecePosition[BLACK_PAWN_5][FILE] == FILE_E;		
	
#define goal_pawn_no_eat_diagonal_right actualBoard[RANK_6][FILE_B] == BLACK_PAWN_1 && 
	piecePosition[BLACK_PAWN_1][RANK] == RANK_6 && piecePosition[BLACK_PAWN_1][FILE] == FILE_B;	

moveBlackPawn() = changeTurnToBlackPawn{currentTurn = BLACK_TURN} -> blackPawn();

#assert moveBlackPawn() reaches goal_pawn_move_single;
#assert moveBlackPawn() reaches goal_pawn_move_single_fail;
#assert moveBlackPawn() reaches goal_pawn_move_double;
#assert moveBlackPawn() reaches goal_pawn_move_double_fail;
#assert moveBlackPawn() reaches goal_pawn_move_double_fail_2;
#assert moveBlackPawn() reaches goal_pawn_eat_diagonal_left;
#assert moveBlackPawn() reaches goal_pawn_eat_diagonal_right;
#assert moveBlackPawn() reaches goal_pawn_no_eat_diagonal_right;
#assert moveBlackPawn() reaches goal_pawn_move_triple;

#define white_pawn_blocked_white actualBoard[RANK_7][FILE_F] == WHITE_PAWN_6 && 
	piecePosition[WHITE_PAWN_6][RANK] == RANK_7 && piecePosition[WHITE_PAWN_6][FILE] == FILE_F;		
#define white_pawn_blocked_black actualBoard[RANK_7][FILE_D] == WHITE_PAWN_6 && 
	piecePosition[WHITE_PAWN_6][RANK] == RANK_7 && piecePosition[WHITE_PAWN_6][FILE] == FILE_D;		
#define white_pawn_eat actualBoard[RANK_7][FILE_E] == WHITE_PAWN_6 && 
	piecePosition[WHITE_PAWN_6][RANK] == RANK_7 && piecePosition[WHITE_PAWN_6][FILE] == FILE_E;	

#assert whitePawn() reaches white_pawn_blocked_white;
#assert whitePawn() reaches white_pawn_blocked_black;
#assert whitePawn() reaches white_pawn_eat;