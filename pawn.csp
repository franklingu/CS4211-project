#include "move.csp";

whitePawn() = whitePawnStraight() [] whitePawnDouble() [] whitePawnUpLeft() [] whitePawnUpRight();

whitePawnStraight() = whiteOnePawnStraight() [] whiteTwoPawnStraight() [] whiteThreePawnStraight() [] whiteFourPawnStraight() [] whiteFivePawnStraight() [] whiteSixPawnStraight() [] whiteSevenPawnStraight() [] whiteEightPawnStraight();
whitePawnDouble() = whiteOnePawnDouble() [] whiteTwoPawnDouble() [] whiteThreePawnDouble() [] whiteFourPawnDouble() [] whiteFivePawnDouble() [] whiteSixPawnDouble() [] whiteSevenPawnDouble() [] whiteEightPawnDouble();
whitePawnUpLeft() = whiteOnePawnUpLeft() [] whiteTwoPawnUpLeft() [] whiteThreePawnUpLeft() [] whiteFourPawnUpLeft() [] whiteFivePawnUpLeft() [] whiteSixPawnUpLeft() [] whiteSevenPawnUpLeft() [] whiteEightPawnUpLeft();
whitePawnUpRight() = whiteOnePawnUpRight() [] whiteTwoPawnUpRight() [] whiteThreePawnUpRight() [] whiteFourPawnUpRight() [] whiteFivePawnUpRight() [] whiteSixPawnUpRight() [] whiteSevenPawnUpRight() [] whiteEightPawnUpRight();

whiteOnePawnStraight() = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_PAWN_1][RANK], piecePosition[WHITE_PAWN_1][FILE], 1, 0) && call(isEmpty, actualBoard, piecePosition[WHITE_PAWN_1][RANK] + 1, piecePosition[WHITE_PAWN_1][FILE])]movePiece(WHITE_PAWN_1, 1, 0);
whiteTwoPawnStraight() = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_PAWN_2][RANK], piecePosition[WHITE_PAWN_2][FILE], 1, 0) && call(isEmpty, actualBoard, piecePosition[WHITE_PAWN_2][RANK] + 1, piecePosition[WHITE_PAWN_2][FILE])]movePiece(WHITE_PAWN_2, 1, 0);
whiteThreePawnStraight() = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_PAWN_3][RANK], piecePosition[WHITE_PAWN_3][FILE], 1, 0) && call(isEmpty, actualBoard, piecePosition[WHITE_PAWN_3][RANK] + 1, piecePosition[WHITE_PAWN_3][FILE])]movePiece(WHITE_PAWN_3, 1, 0);
whiteFourPawnStraight() = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_PAWN_4][RANK], piecePosition[WHITE_PAWN_4][FILE], 1, 0) && call(isEmpty, actualBoard, piecePosition[WHITE_PAWN_4][RANK] + 1, piecePosition[WHITE_PAWN_4][FILE])]movePiece(WHITE_PAWN_4, 1, 0);
whiteFivePawnStraight() = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_PAWN_5][RANK], piecePosition[WHITE_PAWN_5][FILE], 1, 0) && call(isEmpty, actualBoard, piecePosition[WHITE_PAWN_5][RANK] + 1, piecePosition[WHITE_PAWN_5][FILE])]movePiece(WHITE_PAWN_5, 1, 0);
whiteSixPawnStraight() = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_PAWN_6][RANK], piecePosition[WHITE_PAWN_6][FILE], 1, 0) && call(isEmpty, actualBoard, piecePosition[WHITE_PAWN_6][RANK] + 1, piecePosition[WHITE_PAWN_6][FILE])]movePiece(WHITE_PAWN_6, 1, 0);
whiteSevenPawnStraight() = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_PAWN_7][RANK], piecePosition[WHITE_PAWN_7][FILE], 1, 0) && call(isEmpty, actualBoard, piecePosition[WHITE_PAWN_7][RANK] + 1, piecePosition[WHITE_PAWN_7][FILE])]movePiece(WHITE_PAWN_7, 1, 0);
whiteEightPawnStraight() = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_PAWN_8][RANK], piecePosition[WHITE_PAWN_8][FILE], 1, 0) && call(isEmpty, actualBoard, piecePosition[WHITE_PAWN_8][RANK] + 1, piecePosition[WHITE_PAWN_8][FILE])]movePiece(WHITE_PAWN_8, 1, 0);

whiteOnePawnDouble() = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_PAWN_1][RANK], piecePosition[WHITE_PAWN_1][FILE], 2, 0) && piecePosition[WHITE_PAWN_1][RANK] == RANK_2 && call(isEmpty, actualBoard, piecePosition[WHITE_PAWN_1][RANK] + 2, piecePosition[WHITE_PAWN_1][FILE])]movePiece(WHITE_PAWN_1, 2, 0);
whiteTwoPawnDouble() = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_PAWN_2][RANK], piecePosition[WHITE_PAWN_2][FILE], 2, 0) && piecePosition[WHITE_PAWN_2][RANK] == RANK_2 && call(isEmpty, actualBoard, piecePosition[WHITE_PAWN_2][RANK] + 2, piecePosition[WHITE_PAWN_2][FILE])]movePiece(WHITE_PAWN_2, 2, 0);
whiteThreePawnDouble() = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_PAWN_3][RANK], piecePosition[WHITE_PAWN_3][FILE], 2, 0) && piecePosition[WHITE_PAWN_3][RANK] == RANK_2 && call(isEmpty, actualBoard, piecePosition[WHITE_PAWN_3][RANK] + 2, piecePosition[WHITE_PAWN_3][FILE])]movePiece(WHITE_PAWN_3, 2, 0);
whiteFourPawnDouble() = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_PAWN_4][RANK], piecePosition[WHITE_PAWN_4][FILE], 2, 0) && piecePosition[WHITE_PAWN_4][RANK] == RANK_2 && call(isEmpty, actualBoard, piecePosition[WHITE_PAWN_4][RANK] + 2, piecePosition[WHITE_PAWN_4][FILE])]movePiece(WHITE_PAWN_4, 2, 0);
whiteFivePawnDouble() = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_PAWN_5][RANK], piecePosition[WHITE_PAWN_5][FILE], 2, 0) && piecePosition[WHITE_PAWN_5][RANK] == RANK_2 && call(isEmpty, actualBoard, piecePosition[WHITE_PAWN_5][RANK] + 2, piecePosition[WHITE_PAWN_5][FILE])]movePiece(WHITE_PAWN_5, 2, 0);
whiteSixPawnDouble() = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_PAWN_6][RANK], piecePosition[WHITE_PAWN_6][FILE], 2, 0) && piecePosition[WHITE_PAWN_6][RANK] == RANK_2 && call(isEmpty, actualBoard, piecePosition[WHITE_PAWN_6][RANK] + 2, piecePosition[WHITE_PAWN_6][FILE])]movePiece(WHITE_PAWN_6, 2, 0);
whiteSevenPawnDouble() = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_PAWN_7][RANK], piecePosition[WHITE_PAWN_7][FILE], 2, 0) && piecePosition[WHITE_PAWN_7][RANK] == RANK_2 && call(isEmpty, actualBoard, piecePosition[WHITE_PAWN_7][RANK] + 2, piecePosition[WHITE_PAWN_7][FILE])]movePiece(WHITE_PAWN_7, 2, 0);
whiteEightPawnDouble() = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_PAWN_8][RANK], piecePosition[WHITE_PAWN_8][FILE], 2, 0) && piecePosition[WHITE_PAWN_8][RANK] == RANK_2 && call(isEmpty, actualBoard, piecePosition[WHITE_PAWN_8][RANK] + 2, piecePosition[WHITE_PAWN_8][FILE])]movePiece(WHITE_PAWN_8, 2, 0);

whiteOnePawnUpLeft() = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_PAWN_1][RANK], piecePosition[WHITE_PAWN_1][FILE], 1, -1) && call(isBlack, actualBoard, piecePosition[WHITE_PAWN_1][RANK] + 1, piecePosition[WHITE_PAWN_1][FILE] - 1)]movePiece(WHITE_PAWN_1, 1, -1);
whiteTwoPawnUpLeft() = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_PAWN_2][RANK], piecePosition[WHITE_PAWN_2][FILE], 1, -1) && call(isBlack, actualBoard, piecePosition[WHITE_PAWN_2][RANK] + 1, piecePosition[WHITE_PAWN_2][FILE] - 1)]movePiece(WHITE_PAWN_2, 1, -1);
whiteThreePawnUpLeft() = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_PAWN_3][RANK], piecePosition[WHITE_PAWN_3][FILE], 1, -1) && call(isBlack, actualBoard, piecePosition[WHITE_PAWN_3][RANK] + 1, piecePosition[WHITE_PAWN_3][FILE] - 1)]movePiece(WHITE_PAWN_3, 1, -1);
whiteFourPawnUpLeft() = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_PAWN_4][RANK], piecePosition[WHITE_PAWN_4][FILE], 1, -1) && call(isBlack, actualBoard, piecePosition[WHITE_PAWN_4][RANK] + 1, piecePosition[WHITE_PAWN_4][FILE] - 1)]movePiece(WHITE_PAWN_4, 1, -1);
whiteFivePawnUpLeft() = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_PAWN_5][RANK], piecePosition[WHITE_PAWN_5][FILE], 1, -1) && call(isBlack, actualBoard, piecePosition[WHITE_PAWN_5][RANK] + 1, piecePosition[WHITE_PAWN_5][FILE] - 1)]movePiece(WHITE_PAWN_5, 1, -1);
whiteSixPawnUpLeft() = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_PAWN_6][RANK], piecePosition[WHITE_PAWN_6][FILE], 1, -1) && call(isBlack, actualBoard, piecePosition[WHITE_PAWN_6][RANK] + 1, piecePosition[WHITE_PAWN_6][FILE] - 1)]movePiece(WHITE_PAWN_6, 1, -1);
whiteSevenPawnUpLeft() = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_PAWN_7][RANK], piecePosition[WHITE_PAWN_7][FILE], 1, -1) && call(isBlack, actualBoard, piecePosition[WHITE_PAWN_7][RANK] + 1, piecePosition[WHITE_PAWN_7][FILE] - 1)]movePiece(WHITE_PAWN_7, 1, -1);
whiteEightPawnUpLeft() = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_PAWN_8][RANK], piecePosition[WHITE_PAWN_8][FILE], 1, -1) && call(isBlack, actualBoard, piecePosition[WHITE_PAWN_8][RANK] + 1, piecePosition[WHITE_PAWN_8][FILE] - 1)]movePiece(WHITE_PAWN_8, 1, -1);

whiteOnePawnUpRight() = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_PAWN_1][RANK], piecePosition[WHITE_PAWN_1][FILE], 1, 1) && call(isBlack, actualBoard, piecePosition[WHITE_PAWN_1][RANK] + 1, piecePosition[WHITE_PAWN_1][FILE] + 1)]movePiece(WHITE_PAWN_1, 1, 1);
whiteTwoPawnUpRight() = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_PAWN_2][RANK], piecePosition[WHITE_PAWN_2][FILE], 1, 1) && call(isBlack, actualBoard, piecePosition[WHITE_PAWN_2][RANK] + 1, piecePosition[WHITE_PAWN_2][FILE] + 1)]movePiece(WHITE_PAWN_2, 1, 1);
whiteThreePawnUpRight() = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_PAWN_3][RANK], piecePosition[WHITE_PAWN_3][FILE], 1, 1) && call(isBlack, actualBoard, piecePosition[WHITE_PAWN_3][RANK] + 1, piecePosition[WHITE_PAWN_3][FILE] + 1)]movePiece(WHITE_PAWN_3, 1, 1);
whiteFourPawnUpRight() = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_PAWN_4][RANK], piecePosition[WHITE_PAWN_4][FILE], 1, 1) && call(isBlack, actualBoard, piecePosition[WHITE_PAWN_4][RANK] + 1, piecePosition[WHITE_PAWN_4][FILE] + 1)]movePiece(WHITE_PAWN_4, 1, 1);
whiteFivePawnUpRight() = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_PAWN_5][RANK], piecePosition[WHITE_PAWN_5][FILE], 1, 1) && call(isBlack, actualBoard, piecePosition[WHITE_PAWN_5][RANK] + 1, piecePosition[WHITE_PAWN_5][FILE] + 1)]movePiece(WHITE_PAWN_5, 1, 1);
whiteSixPawnUpRight() = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_PAWN_6][RANK], piecePosition[WHITE_PAWN_6][FILE], 1, 1) && call(isBlack, actualBoard, piecePosition[WHITE_PAWN_6][RANK] + 1, piecePosition[WHITE_PAWN_6][FILE] + 1)]movePiece(WHITE_PAWN_6, 1, 1);
whiteSevenPawnUpRight() = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_PAWN_7][RANK], piecePosition[WHITE_PAWN_7][FILE], 1, 1) && call(isBlack, actualBoard, piecePosition[WHITE_PAWN_7][RANK] + 1, piecePosition[WHITE_PAWN_7][FILE] + 1)]movePiece(WHITE_PAWN_7, 1, 1);
whiteEightPawnUpRight() = [call(isLegal, currentTurn, actualBoard, piecePosition[WHITE_KING][RANK], piecePosition[WHITE_KING][FILE], piecePosition[WHITE_PAWN_8][RANK], piecePosition[WHITE_PAWN_8][FILE], 1, 1) && call(isBlack, actualBoard, piecePosition[WHITE_PAWN_8][RANK] + 1, piecePosition[WHITE_PAWN_8][FILE] + 1)]movePiece(WHITE_PAWN_8, 1, 1);

blackPawn() = blackPawnStraight() [] blackPawnDouble() [] blackPawnDownLeft() [] blackPawnDownRight();

blackPawnStraight() = blackOnePawnStraight() [] blackTwoPawnStraight() [] blackThreePawnStraight() [] blackFourPawnStraight() [] blackFivePawnStraight() [] blackSixPawnStraight() [] blackSevenPawnStraight() [] blackEightPawnStraight();
blackPawnDouble() = blackOnePawnDouble() [] blackTwoPawnDouble() [] blackThreePawnDouble() [] blackFourPawnDouble() [] blackFivePawnDouble() [] blackSixPawnDouble() [] blackSevenPawnDouble() [] blackEightPawnDouble();
blackPawnDownLeft() = blackOnePawnDownLeft() [] blackTwoPawnDownLeft() [] blackThreePawnDownLeft() [] blackFourPawnDownLeft() [] blackFivePawnDownLeft() [] blackSixPawnDownLeft() [] blackSevenPawnDownLeft() [] blackEightPawnDownLeft();
blackPawnDownRight() = blackOnePawnDownRight() [] blackTwoPawnDownRight() [] blackThreePawnDownRight() [] blackFourPawnDownRight() [] blackFivePawnDownRight() [] blackSixPawnDownRight() [] blackSevenPawnDownRight() [] blackEightPawnDownRight();

blackOnePawnStraight() = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_PAWN_1][RANK], piecePosition[BLACK_PAWN_1][FILE], -1, 0) && call(isEmpty, actualBoard, piecePosition[BLACK_PAWN_1][RANK] - 1, piecePosition[BLACK_PAWN_1][FILE])]movePiece(BLACK_PAWN_1, -1, 0);
blackTwoPawnStraight() = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_PAWN_2][RANK], piecePosition[BLACK_PAWN_2][FILE], -1, 0) && call(isEmpty, actualBoard, piecePosition[BLACK_PAWN_2][RANK] - 1, piecePosition[BLACK_PAWN_2][FILE])]movePiece(BLACK_PAWN_2, -1, 0);
blackThreePawnStraight() = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_PAWN_3][RANK], piecePosition[BLACK_PAWN_3][FILE], -1, 0) && call(isEmpty, actualBoard, piecePosition[BLACK_PAWN_3][RANK] - 1, piecePosition[BLACK_PAWN_3][FILE])]movePiece(BLACK_PAWN_3, -1, 0);
blackFourPawnStraight() = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_PAWN_4][RANK], piecePosition[BLACK_PAWN_4][FILE], -1, 0) && call(isEmpty, actualBoard, piecePosition[BLACK_PAWN_4][RANK] - 1, piecePosition[BLACK_PAWN_4][FILE])]movePiece(BLACK_PAWN_4, -1, 0);
blackFivePawnStraight() = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_PAWN_5][RANK], piecePosition[BLACK_PAWN_5][FILE], -1, 0) && call(isEmpty, actualBoard, piecePosition[BLACK_PAWN_5][RANK] - 1, piecePosition[BLACK_PAWN_5][FILE])]movePiece(BLACK_PAWN_5, -1, 0);
blackSixPawnStraight() = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_PAWN_6][RANK], piecePosition[BLACK_PAWN_6][FILE], -1, 0) && call(isEmpty, actualBoard, piecePosition[BLACK_PAWN_6][RANK] - 1, piecePosition[BLACK_PAWN_6][FILE])]movePiece(BLACK_PAWN_6, -1, 0);
blackSevenPawnStraight() = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_PAWN_7][RANK], piecePosition[BLACK_PAWN_7][FILE], -1, 0) && call(isEmpty, actualBoard, piecePosition[BLACK_PAWN_7][RANK] - 1, piecePosition[BLACK_PAWN_7][FILE])]movePiece(BLACK_PAWN_7, -1, 0);
blackEightPawnStraight() = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_PAWN_8][RANK], piecePosition[BLACK_PAWN_8][FILE], -1, 0) && call(isEmpty, actualBoard, piecePosition[BLACK_PAWN_8][RANK] - 1, piecePosition[BLACK_PAWN_8][FILE])]movePiece(BLACK_PAWN_8, -1, 0);

blackOnePawnDouble() = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_PAWN_1][RANK], piecePosition[BLACK_PAWN_1][FILE], -2, 0) && piecePosition[BLACK_PAWN_1][RANK] == RANK_7 && call(isEmpty, actualBoard, piecePosition[BLACK_PAWN_1][RANK] - 2, piecePosition[BLACK_PAWN_1][FILE])]movePiece(BLACK_PAWN_1, -2, 0);
blackTwoPawnDouble() = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_PAWN_2][RANK], piecePosition[BLACK_PAWN_2][FILE], -2, 0) && piecePosition[BLACK_PAWN_2][RANK] == RANK_7 && call(isEmpty, actualBoard, piecePosition[BLACK_PAWN_2][RANK] - 2, piecePosition[BLACK_PAWN_2][FILE])]movePiece(BLACK_PAWN_2, -2, 0);
blackThreePawnDouble() = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_PAWN_3][RANK], piecePosition[BLACK_PAWN_3][FILE], -2, 0) && piecePosition[BLACK_PAWN_3][RANK] == RANK_7 && call(isEmpty, actualBoard, piecePosition[BLACK_PAWN_3][RANK] - 2, piecePosition[BLACK_PAWN_3][FILE])]movePiece(BLACK_PAWN_3, -2, 0);
blackFourPawnDouble() = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_PAWN_4][RANK], piecePosition[BLACK_PAWN_4][FILE], -2, 0) && piecePosition[BLACK_PAWN_4][RANK] == RANK_7 && call(isEmpty, actualBoard, piecePosition[BLACK_PAWN_4][RANK] - 2, piecePosition[BLACK_PAWN_4][FILE])]movePiece(BLACK_PAWN_4, -2, 0);
blackFivePawnDouble() = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_PAWN_5][RANK], piecePosition[BLACK_PAWN_5][FILE], -2, 0) && piecePosition[BLACK_PAWN_5][RANK] == RANK_7 && call(isEmpty, actualBoard, piecePosition[BLACK_PAWN_5][RANK] - 2, piecePosition[BLACK_PAWN_5][FILE])]movePiece(BLACK_PAWN_5, -2, 0);
blackSixPawnDouble() = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_PAWN_6][RANK], piecePosition[BLACK_PAWN_6][FILE], -2, 0) && piecePosition[BLACK_PAWN_6][RANK] == RANK_7 && call(isEmpty, actualBoard, piecePosition[BLACK_PAWN_6][RANK] - 2, piecePosition[BLACK_PAWN_6][FILE])]movePiece(BLACK_PAWN_6, -2, 0);
blackSevenPawnDouble() = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_PAWN_7][RANK], piecePosition[BLACK_PAWN_7][FILE], -2, 0) && piecePosition[BLACK_PAWN_7][RANK] == RANK_7 && call(isEmpty, actualBoard, piecePosition[BLACK_PAWN_7][RANK] - 2, piecePosition[BLACK_PAWN_7][FILE])]movePiece(BLACK_PAWN_7, -2, 0);
blackEightPawnDouble() = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_PAWN_8][RANK], piecePosition[BLACK_PAWN_8][FILE], -2, 0) && piecePosition[BLACK_PAWN_8][RANK] == RANK_7 && call(isEmpty, actualBoard, piecePosition[BLACK_PAWN_8][RANK] - 2, piecePosition[BLACK_PAWN_8][FILE])]movePiece(BLACK_PAWN_8, -2, 0);

blackOnePawnDownLeft() = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_PAWN_1][RANK], piecePosition[BLACK_PAWN_1][FILE], -1, -1) && call(isWhite, actualBoard, piecePosition[BLACK_PAWN_1][RANK] - 1, piecePosition[BLACK_PAWN_1][FILE] - 1)]movePiece(BLACK_PAWN_1, -1, -1);
blackTwoPawnDownLeft() = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_PAWN_2][RANK], piecePosition[BLACK_PAWN_2][FILE], -1, -1) && call(isWhite, actualBoard, piecePosition[BLACK_PAWN_2][RANK] - 1, piecePosition[BLACK_PAWN_2][FILE] - 1)]movePiece(BLACK_PAWN_2, -1, -1);
blackThreePawnDownLeft() = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_PAWN_3][RANK], piecePosition[BLACK_PAWN_3][FILE], -1, -1) && call(isWhite, actualBoard, piecePosition[BLACK_PAWN_3][RANK] - 1, piecePosition[BLACK_PAWN_3][FILE] - 1)]movePiece(BLACK_PAWN_3, -1, -1);
blackFourPawnDownLeft() = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_PAWN_4][RANK], piecePosition[BLACK_PAWN_4][FILE], -1, -1) && call(isWhite, actualBoard, piecePosition[BLACK_PAWN_4][RANK] - 1, piecePosition[BLACK_PAWN_4][FILE] - 1)]movePiece(BLACK_PAWN_4, -1, -1);
blackFivePawnDownLeft() = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_PAWN_5][RANK], piecePosition[BLACK_PAWN_5][FILE], -1, -1) && call(isWhite, actualBoard, piecePosition[BLACK_PAWN_5][RANK] - 1, piecePosition[BLACK_PAWN_5][FILE] - 1)]movePiece(BLACK_PAWN_5, -1, -1);
blackSixPawnDownLeft() = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_PAWN_6][RANK], piecePosition[BLACK_PAWN_6][FILE], -1, -1) && call(isWhite, actualBoard, piecePosition[BLACK_PAWN_6][RANK] - 1, piecePosition[BLACK_PAWN_6][FILE] - 1)]movePiece(BLACK_PAWN_6, -1, -1);
blackSevenPawnDownLeft() = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_PAWN_7][RANK], piecePosition[BLACK_PAWN_7][FILE], -1, -1) && call(isWhite, actualBoard, piecePosition[BLACK_PAWN_7][RANK] - 1, piecePosition[BLACK_PAWN_7][FILE] - 1)]movePiece(BLACK_PAWN_7, -1, -1);
blackEightPawnDownLeft() = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_PAWN_8][RANK], piecePosition[BLACK_PAWN_8][FILE], -1, -1) && call(isWhite, actualBoard, piecePosition[BLACK_PAWN_8][RANK] - 1, piecePosition[BLACK_PAWN_8][FILE] - 1)]movePiece(BLACK_PAWN_8, -1, -1);

blackOnePawnDownRight() = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_PAWN_1][RANK], piecePosition[BLACK_PAWN_1][FILE], -1, 1) && call(isWhite, actualBoard, piecePosition[BLACK_PAWN_1][RANK] - 1, piecePosition[BLACK_PAWN_1][FILE] + 1)]movePiece(BLACK_PAWN_1, -1, 1);
blackTwoPawnDownRight() = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_PAWN_2][RANK], piecePosition[BLACK_PAWN_2][FILE], -1, 1) && call(isWhite, actualBoard, piecePosition[BLACK_PAWN_2][RANK] - 1, piecePosition[BLACK_PAWN_2][FILE] + 1)]movePiece(BLACK_PAWN_2, -1, 1);
blackThreePawnDownRight() = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_PAWN_3][RANK], piecePosition[BLACK_PAWN_3][FILE], -1, 1) && call(isWhite, actualBoard, piecePosition[BLACK_PAWN_3][RANK] - 1, piecePosition[BLACK_PAWN_3][FILE] + 1)]movePiece(BLACK_PAWN_3, -1, 1);
blackFourPawnDownRight() = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_PAWN_4][RANK], piecePosition[BLACK_PAWN_4][FILE], -1, 1) && call(isWhite, actualBoard, piecePosition[BLACK_PAWN_4][RANK] - 1, piecePosition[BLACK_PAWN_4][FILE] + 1)]movePiece(BLACK_PAWN_4, -1, 1);
blackFivePawnDownRight() = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_PAWN_5][RANK], piecePosition[BLACK_PAWN_5][FILE], -1, 1) && call(isWhite, actualBoard, piecePosition[BLACK_PAWN_5][RANK] - 1, piecePosition[BLACK_PAWN_5][FILE] + 1)]movePiece(BLACK_PAWN_5, -1, 1);
blackSixPawnDownRight() = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_PAWN_6][RANK], piecePosition[BLACK_PAWN_6][FILE], -1, 1) && call(isWhite, actualBoard, piecePosition[BLACK_PAWN_6][RANK] - 1, piecePosition[BLACK_PAWN_6][FILE] + 1)]movePiece(BLACK_PAWN_6, -1, 1);
blackSevenPawnDownRight() = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_PAWN_7][RANK], piecePosition[BLACK_PAWN_7][FILE], -1, 1) && call(isWhite, actualBoard, piecePosition[BLACK_PAWN_7][RANK] - 1, piecePosition[BLACK_PAWN_7][FILE] + 1)]movePiece(BLACK_PAWN_7, -1, 1);
blackEightPawnDownRight() = [call(isLegal, currentTurn, actualBoard, piecePosition[BLACK_KING][RANK], piecePosition[BLACK_KING][FILE], piecePosition[BLACK_PAWN_8][RANK], piecePosition[BLACK_PAWN_8][FILE], -1, 1) && call(isWhite, actualBoard, piecePosition[BLACK_PAWN_8][RANK] - 1, piecePosition[BLACK_PAWN_8][FILE] + 1)]movePiece(BLACK_PAWN_8, -1, 1);

moveBlackPawn() = changeTurnToBlack{currentTurn = BLACK_TURN} -> blackPawn();

#define goalSuccessBlackPawnSingle actualBoard[RANK_6][FILE_E] == BLACK_PAWN_5 && 
										piecePosition[BLACK_PAWN_5][RANK] == RANK_6 && piecePosition[BLACK_PAWN_5][FILE] == FILE_E;	
#define goalSuccessBlackPawnInitialDouble actualBoard[RANK_5][FILE_E] == BLACK_PAWN_5 && 
										piecePosition[BLACK_PAWN_5][RANK] == RANK_5 && piecePosition[BLACK_PAWN_5][FILE] == FILE_E;	
#define goalFailureBlackPawnSingleSelfPiece actualBoard[RANK_6][FILE_A] == BLACK_PAWN_1 && 
										piecePosition[BLACK_PAWN_1][RANK] == RANK_6 && piecePosition[BLACK_PAWN_1][FILE] == FILE_A;		
#define goalFailureBlackPawnDoubleBehindSelfPiece actualBoard[RANK_5][FILE_A] == BLACK_PAWN_1 && 
										piecePosition[BLACK_PAWN_1][RANK] == RANK_5 && piecePosition[BLACK_PAWN_1][FILE] == FILE_A;
#define goalFailureBlackPawnDoubelNotInitial actualBoard[RANK_4][FILE_C] == BLACK_PAWN_3 && 
										piecePosition[BLACK_PAWN_3][RANK] == RANK_4 && piecePosition[BLACK_PAWN_3][FILE] == FILE_C;
#define goalSuccessBlackPawnDiagonalLeftEnemyPiece actualBoard[RANK_6][FILE_D] == BLACK_PAWN_5 && 
										piecePosition[BLACK_PAWN_5][RANK] == RANK_6 && piecePosition[BLACK_PAWN_5][FILE] == FILE_D;
#define goalSuccessBlackPawnDiagonaRightlEnemyPiece actualBoard[RANK_6][FILE_F] == BLACK_PAWN_5 && 
										piecePosition[BLACK_PAWN_5][RANK] == RANK_6 && piecePosition[BLACK_PAWN_5][FILE] == FILE_F;	
#define goalFailureBlackPawnMoveNotPossible1 actualBoard[RANK_4][FILE_E] == BLACK_PAWN_5 && 
										piecePosition[BLACK_PAWN_5][RANK] == RANK_4 && piecePosition[BLACK_PAWN_5][FILE] == FILE_E;
#define goalFailureDiagonalRightNoEnemyPiece actualBoard[RANK_6][FILE_B] == BLACK_PAWN_1 && 
										piecePosition[BLACK_PAWN_1][RANK] == RANK_6 && piecePosition[BLACK_PAWN_1][FILE] == FILE_B;	

#assert moveBlackPawn() reaches goalSuccessBlackPawnSingle;
#assert moveBlackPawn() reaches goalFailureBlackPawnSingleSelfPiece;
#assert moveBlackPawn() reaches goalSuccessBlackPawnInitialDouble;
#assert moveBlackPawn() reaches goalFailureBlackPawnDoubleBehindSelfPiece;
#assert moveBlackPawn() reaches goalFailureBlackPawnDoubelNotInitial;
#assert moveBlackPawn() reaches goalSuccessBlackPawnDiagonalLeftEnemyPiece;
#assert moveBlackPawn() reaches goalSuccessBlackPawnDiagonaRightlEnemyPiece;
#assert moveBlackPawn() reaches goalFailureDiagonalRightNoEnemyPiece;
#assert moveBlackPawn() reaches goalFailureBlackPawnMoveNotPossible1;

#define goalFailureWhitePawnSingleSelfPiece actualBoard[RANK_7][FILE_F] == WHITE_PAWN_6 && 
										piecePosition[WHITE_PAWN_6][RANK] == RANK_7 && piecePosition[WHITE_PAWN_6][FILE] == FILE_F;		
#define goalFailureWhitePawnSingleEnemyPiece actualBoard[RANK_7][FILE_D] == WHITE_PAWN_6 && 
										piecePosition[WHITE_PAWN_6][RANK] == RANK_7 && piecePosition[WHITE_PAWN_6][FILE] == FILE_D;		
#define goalSuccessWhitePawnDiagonalEnemyPiece actualBoard[RANK_7][FILE_E] == WHITE_PAWN_6 && 
										piecePosition[WHITE_PAWN_6][RANK] == RANK_7 && piecePosition[WHITE_PAWN_6][FILE] == FILE_E;
#define goalFailureWhitePawnDiagonalNoEnemyPiece actualBoard[RANK_7][FILE_C] == WHITE_PAWN_6 && 
										piecePosition[WHITE_PAWN_6][RANK] == RANK_7 && piecePosition[WHITE_PAWN_6][FILE] == FILE_C;	

#assert whitePawn() reaches goalFailureWhitePawnSingleSelfPiece;
#assert whitePawn() reaches goalFailureWhitePawnSingleEnemyPiece;
#assert whitePawn() reaches goalSuccessWhitePawnDiagonalEnemyPiece;
#assert whitePawn() reaches goalFailureWhitePawnDiagonalNoEnemyPiece;
