// the simplified chess game

var board = [0, 0, 0, 0, 1, 0, 0, 0, 0];
hvar currentPos = 4; //emptypos is a secondary variable, no need to put it in the state space

Game() = Left() [] Right() [] Up() [] Down() [] UpLeft() [] DownLeft() [] UpRight() [] DownRight();

Right() = [currentPos!=2 && currentPos!=5 && currentPos!=8]goleft{board[currentPos+1]=board[currentPos]; board[currentPos]=0; currentPos=currentPos+1;} -> Game();
Left() = [currentPos!=0 && currentPos!=3 && currentPos!=6]goright{board[currentPos-1]=board[currentPos]; board[currentPos]=0; currentPos=currentPos-1;} -> Game();
Down() = [currentPos!=6 && currentPos!=7 && currentPos!=8]goup{board[currentPos+3]=board[currentPos]; board[currentPos]=0; currentPos=currentPos+3;} -> Game();
Up() = [currentPos!=0 && currentPos!=1 && currentPos!=2]godown{board[currentPos-3]=board[currentPos]; board[currentPos]=0; currentPos=currentPos-3;} -> Game();
UpLeft() = [currentPos!=0 && currentPos!=1 && currentPos!=2 && currentPos!=3 && currentPos!=6]goupleft{board[currentPos-4]=board[currentPos]; board[currentPos]=0; currentPos=currentPos-4;} -> Game();
DownLeft() = [currentPos!=0 && currentPos!=3 && currentPos!=6 && currentPos!=7 && currentPos!=8]godownleft{board[currentPos+2]=board[currentPos]; board[currentPos]=0; currentPos=currentPos+2;} -> Game();
UpRight() = [currentPos!=0 && currentPos!=1 && currentPos!=2 && currentPos!=5 && currentPos!=8]goupright{board[currentPos-2]=board[currentPos]; board[currentPos]=0; currentPos=currentPos-2;} -> Game();
DownRight() = [currentPos!=2 && currentPos!=5 && currentPos!=8 && currentPos!=7 && currentPos!=6]godownright{board[currentPos+4]=board[currentPos]; board[currentPos]=0; currentPos=currentPos+4;} -> Game();

#assert Game() reaches goal1;
#assert Game() reaches goal2;
#assert Game() reaches goal3;
#assert Game() reaches goal4;
#assert Game() reaches goal5;
#assert Game() reaches goal6;
#assert Game() reaches goal7;
#assert Game() reaches goal8;
#assert Game() reaches goal9;

#define goal1 board[0] == 1 && board[1] == 0 && board[2] == 0 && board[3] == 0 && board[4] == 0 && board[5] == 0 && board[6] == 0 &&  board[7] == 0 && board[8] == 0;
#define goal2 board[0] == 0 && board[1] == 1 && board[2] == 0 && board[3] == 0 && board[4] == 0 && board[5] == 0 && board[6] == 0 &&  board[7] == 0 && board[8] == 0;
#define goal3 board[0] == 0 && board[1] == 0 && board[2] == 1 && board[3] == 0 && board[4] == 0 && board[5] == 0 && board[6] == 0 &&  board[7] == 0 && board[8] == 0;
#define goal4 board[0] == 0 && board[1] == 0 && board[2] == 0 && board[3] == 1 && board[4] == 0 && board[5] == 0 && board[6] == 0 &&  board[7] == 0 && board[8] == 0;
#define goal5 board[0] == 0 && board[1] == 0 && board[2] == 0 && board[3] == 0 && board[4] == 1 && board[5] == 0 && board[6] == 0 &&  board[7] == 0 && board[8] == 0;
#define goal6 board[0] == 0 && board[1] == 0 && board[2] == 0 && board[3] == 0 && board[4] == 0 && board[5] == 1 && board[6] == 0 &&  board[7] == 0 && board[8] == 0;
#define goal7 board[0] == 0 && board[1] == 0 && board[2] == 0 && board[3] == 0 && board[4] == 0 && board[5] == 0 && board[6] == 1 &&  board[7] == 0 && board[8] == 0;
#define goal8 board[0] == 0 && board[1] == 0 && board[2] == 0 && board[3] == 0 && board[4] == 0 && board[5] == 0 && board[6] == 0 &&  board[7] == 1 && board[8] == 0;
#define goal9 board[0] == 0 && board[1] == 0 && board[2] == 0 && board[3] == 0 && board[4] == 0 && board[5] == 0 && board[6] == 0 &&  board[7] == 0 && board[8] == 1;
