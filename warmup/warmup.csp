// Board is seen as a coordinate (x,y) where:
// x is the row number
// y is the column number 
// Bottom left corner is (0,0)

#define BoardSize 6;
#define Row 0;
#define Column 1;

var kingpos = [0,0];

Game() = Left() [] Right() [] Top() [] Bottom() [] TopLeft() [] TopRight() [] BottomLeft() [] BottomRight();

Left() = [kingpos[Column] > 0] left {kingpos[Column] = kingpos[Column] - 1} -> Game();
Right() = [kingpos[Column] < BoardSize-1] right{kingpos[Column]=kingpos[Column]+1} -> Game();
Top() = [kingpos[Row] < BoardSize-1] top{kingpos[Row]=kingpos[Row]+1} -> Game();
Bottom() = [kingpos[Row] > 0] bottom{kingpos[Row]=kingpos[Row]-1} -> Game();
TopLeft() = [kingpos[Row] < BoardSize-1 && kingpos[Column]>0] topleft{kingpos[Column]=kingpos[Column]-1;kingpos[Row]=kingpos[Row]+1} -> Game();
BottomLeft() = [kingpos[Row] > 0 && kingpos[Column]>0] bottomleft{kingpos[Column]=kingpos[Column]-1;kingpos[Row]=kingpos[Row]-1} -> Game();
TopRight() = [kingpos[Row] < BoardSize-1 && kingpos[Column]<BoardSize-1] topright{kingpos[Column]=kingpos[Column]+1;kingpos[Row]=kingpos[Row]+1} -> Game();
BottomRight() = [kingpos[Row] > 0 && kingpos[Column]<BoardSize-1] bottomright{kingpos[Column]=kingpos[Column]+1;kingpos[Row]=kingpos[Row]-1} -> Game();

#define goal_1 kingpos[Row] == 0 && kingpos[Column] == 0;
#define goal_2 kingpos[Row] == 0 && kingpos[Column] == 1;
#define goal_3 kingpos[Row] == 0 && kingpos[Column] == 2;
#define goal_4 kingpos[Row] == 1 && kingpos[Column] == 0;
#define goal_5 kingpos[Row] == 1 && kingpos[Column] == 1;
#define goal_6 kingpos[Row] == 1 && kingpos[Column] == 2;
#define goal_7 kingpos[Row] == BoardSize-1 && kingpos[Column] == 0;
#define goal_8 kingpos[Row] == BoardSize-1 && kingpos[Column] == 1;
#define goal_9 kingpos[Row] == BoardSize-1 && kingpos[Column] == BoardSize-1;

#define loss kingpos[Row] >= BoardSize || kingpos[Row] < 0 || kingpos[Column] >= BoardSize || kingpos[Column] < 0;

#assert Game() reaches goal_1;
#assert Game() reaches goal_2;
#assert Game() reaches goal_3;
#assert Game() reaches goal_4;
#assert Game() reaches goal_5;
#assert Game() reaches goal_6;
#assert Game() reaches goal_7;
#assert Game() reaches goal_8;
#assert Game() reaches goal_9;
#assert Game() reaches loss;

#assert Game() |= [] goal_9;
#assert Game() |= []<> goal_9;
#assert Game() |= <>[] goal_9;
#assert Game() |= <> goal_9;